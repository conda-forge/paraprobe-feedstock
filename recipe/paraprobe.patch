diff --git a/code/paraprobe-autoreporter/src/python/__init__.py b/code/paraprobe-autoreporter/src/python/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/code/paraprobe-autoreporter/src/python/paraprobe_autoreporter.py b/code/paraprobe-autoreporter/src/python/paraprobe_autoreporter.py
index 5bbab77..bfea020 100644
--- a/code/paraprobe-autoreporter/src/python/paraprobe_autoreporter.py
+++ b/code/paraprobe-autoreporter/src/python/paraprobe_autoreporter.py
@@ -16,11 +16,11 @@
 #
 
 
-from wizard.selector_report import AutoReporterSelector
-from wizard.ranger_report import AutoReporterRanger
-from wizard.surfacer_report import AutoReporterSurfacer
-from wizard.distancer_report import AutoReporterDistancer
-from wizard.tessellator_report import AutoReporterTessellator
-from wizard.spatstat_report import AutoreporterSpatstat
-from wizard.nanochem_report import AutoReporterNanochem
-from wizard.intersector_report import AutoReporterIntersector
+from paraprobe_autoreporter.wizard.selector_report import AutoReporterSelector
+from paraprobe_autoreporter.wizard.ranger_report import AutoReporterRanger
+from paraprobe_autoreporter.wizard.surfacer_report import AutoReporterSurfacer
+from paraprobe_autoreporter.wizard.distancer_report import AutoReporterDistancer
+from paraprobe_autoreporter.wizard.tessellator_report import AutoReporterTessellator
+from paraprobe_autoreporter.wizard.spatstat_report import AutoreporterSpatstat
+from paraprobe_autoreporter.wizard.nanochem_report import AutoReporterNanochem
+from paraprobe_autoreporter.wizard.intersector_report import AutoReporterIntersector
diff --git a/code/paraprobe-autoreporter/src/python/wizard/distancer_report.py b/code/paraprobe-autoreporter/src/python/wizard/distancer_report.py
index f7dd3a5..4e3d4b9 100644
--- a/code/paraprobe-autoreporter/src/python/wizard/distancer_report.py
+++ b/code/paraprobe-autoreporter/src/python/wizard/distancer_report.py
@@ -21,7 +21,7 @@ import numpy as np
 
 import h5py
 
-import wizard.plotting.default.line_plot_property_set_for_fixed_value as mycdf
+import paraprobe_autoreporter.wizard.plotting.default.line_plot_property_set_for_fixed_value as mycdf
 
 
 class AutoReporterDistancer():
diff --git a/code/paraprobe-autoreporter/src/python/wizard/nanochem_report.py b/code/paraprobe-autoreporter/src/python/wizard/nanochem_report.py
index d25e0a8..fc2a407 100644
--- a/code/paraprobe-autoreporter/src/python/wizard/nanochem_report.py
+++ b/code/paraprobe-autoreporter/src/python/wizard/nanochem_report.py
@@ -27,11 +27,11 @@ import pandas as pd
 
 from ase.data import chemical_symbols, atomic_numbers
 
-import wizard.plotting.default.scatter_plot_property_set_over_value_set as mysct
+import paraprobe_autoreporter.wizard.plotting.default.scatter_plot_property_set_over_value_set as mysct
 
-import wizard.plotting.default.line_plot_property_set_for_fixed_value as mycdf
+import paraprobe_autoreporter.wizard.plotting.default.line_plot_property_set_for_fixed_value as mycdf
 
-import wizard.plotting.default.composition_plots as mycmp
+import paraprobe_autoreporter.wizard.plotting.default.composition_plots as mycmp
 
 
 def filtered_mean(df):
diff --git a/code/paraprobe-autoreporter/src/python/wizard/spatstat_report.py b/code/paraprobe-autoreporter/src/python/wizard/spatstat_report.py
index ca0ce42..72051f8 100644
--- a/code/paraprobe-autoreporter/src/python/wizard/spatstat_report.py
+++ b/code/paraprobe-autoreporter/src/python/wizard/spatstat_report.py
@@ -21,9 +21,9 @@ import numpy as np
 
 import h5py
 
-import wizard.plotting.default.line_plot_property_set_for_fixed_value as mycdf
+import paraprobe_autoreporter.wizard.plotting.default.line_plot_property_set_for_fixed_value as mycdf
 
-from wizard.numerics import EPSILON
+from paraprobe_autoreporter.wizard.numerics import EPSILON
 
 
 class AutoReporterSpatstat():
diff --git a/code/paraprobe-autoreporter/src/python/wizard/tessellator_report.py b/code/paraprobe-autoreporter/src/python/wizard/tessellator_report.py
index ccabffe..745f5e4 100644
--- a/code/paraprobe-autoreporter/src/python/wizard/tessellator_report.py
+++ b/code/paraprobe-autoreporter/src/python/wizard/tessellator_report.py
@@ -21,7 +21,7 @@ import numpy as np
 
 import h5py
 
-import wizard.plotting.default.line_plot_property_set_for_fixed_value as mycdf
+import paraprobe_autoreporter.wizard.plotting.default.line_plot_property_set_for_fixed_value as mycdf
 
 
 class AutoReporterTessellator():
diff --git a/code/paraprobe-distancer/CMakeLists.txt b/code/paraprobe-distancer/CMakeLists.txt
index 66982b8..7515ed5 100755
--- a/code/paraprobe-distancer/CMakeLists.txt
+++ b/code/paraprobe-distancer/CMakeLists.txt
@@ -1,34 +1,17 @@
 cmake_minimum_required(VERSION 3.18.4)
 
-################################################################################################################################
-##DEVELOPER SECTION#############################################################################################################
-##in this section software developers need to make changes when debugging#######################################################
-################################################################################################################################
-#please name your project accordingly
 set(MYPROJECTNAME "paraprobe_distancer")
 message([STATUS] "Projectname is ${MYPROJECTNAME}")
-project(${MYPROJECTNAME} LANGUAGES CXX)
+project(${MYPROJECTNAME} LANGUAGES C CXX)
 set(CMAKE_BUILD_DIR "build")
 
-#pull general information about external libraries and paths related to paraprobe
-include("../PARAPROBE.Dependencies.cmake")
-message([STATUS] "MYPROJECTPATH: ${MYPROJECTPATH}")
-message([STATUS] "MYUTILSPATH: ${MYUTILSPATH}")
-message([STATUS] "MYHDF5PATH: ${MYHDFPATH}")
-message([STATUS] "MYVOROXXPATH: ${MYVOROXXPATH}")
-
-#compose a tool-specific path
-set(MYTOOLPATH "${MYPROJECTPATH}/code/paraprobe-distancer/")
-message([STATUS] "MYTOOLPATH: ${MYTOOLPATH}")
 set(EMPLOY_GNUCOMPILER ON)
+message([STATUS] "CONDA_PATH: ${CONDA_PREFIX}")
 message([STATUS] "MYCCC_COMPILER: __${CMAKE_C_COMPILER}__")
 message([STATUS] "MYCXX_COMPILER: __${CMAKE_CXX_COMPILER}__")
 
-#define which parallelization layers are used
 set(EMPLOY_PARALLELISM_CUDA OFF)
 
-#choose optimization level
-##-O0 nothing, debug purposes, -O1 moderate optimization, -O2 -O3 for production level up to aggressive architecture specific non-portable optimization
 if(EMPLOY_GNUCOMPILER)
 	set(MYOPTLEVEL "-O2")
 	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MYOPTLEVEL}")
@@ -36,51 +19,30 @@ if(EMPLOY_GNUCOMPILER)
 	message([STATUS] "We utilize optimization level ${MYOPTLEVEL}")
 endif()
 
-################################################################################################################################
-##END OF INTERACTION FOR NON PRO USERS##########################################################################################
-##here advanced users might want/need to make modifications if they use non default places for thirdparty libraries#############
-################################################################################################################################
-#HDF5 local installation for advanced I/O, collecting metadata and bundle analysis results together
-include_directories("${MYHDFPATH}/include")
-link_directories("${MYHDFPATH}/lib")
-set(MYHDFLINKFLAGS "-L${MYHDFPATH}/lib/ ${MYHDFPATH}/lib/libhdf5_hl.a ${MYHDFPATH}/lib/libhdf5.a ${MYHDFPATH}/lib/libz.a ${MYHDFPATH}/lib/libszaec.a ${MYHDFPATH}/lib/libaec.a -ldl")
-
-set(BOOST_ROOT "${MYBOOSTPATH}")
-set(Boost_NO_SYSTEM_PATHS ON)
-#set(Boost_INCLUDE_DIR "${MYBOOSTPATH}")
-#include_directories("${MYCGALPATH}")
-set(CGAL_DIR "${MYCGALPATH}")
-include_directories("${MYEIGENPATH}")
-include_directories("${MYVOROXXPATH}/src")
-
-#GMP and MPFR is included and found alongside the CGAL library
-#connect with ExternalLibraries.cmake via MYCGALHOME and MYEIGENHOME
-find_package(CGAL QUIET)
-if( CGAL_FOUND )
-	include( ${CGAL_USE_FILE} )
-	if (EMPLOY_MYEIGEN)
-		find_package(Eigen3 3.1.0 REQUIRED) #(3.1.0 or greater)
-		include(CGAL_Eigen3_support)
-		if(NOT TARGET CGAL::Eigen3_support)
-			message(STATUS "This project requires the Eigen library, and will not be compiled.")
-			return()
-		endif()
-	endif()
-endif()
+find_package(HDF5 REQUIRED)
+include_directories(${HDF5_INCLUDE_DIRS})
+set(MYHDFLINKFLAGS "-L${CONDA_PREFIX}/lib/ ${CONDA_PREFIX}/lib/libhdf5_hl.so ${CONDA_PREFIX}/lib/libhdf5.so ${CONDA_PREFIX}/lib/libz.so.1 ${CONDA_PREFIX}/lib/libsz.so ${CONDA_PREFIX}/lib/libaec.so -ldl")
+
+find_package(Boost REQUIRED)
+include_directories(${Boost_INCLUDE_DIRS})
+
+find_package(CGAL REQUIRED)
+include                     (${CGAL_USE_FILE})
+include_directories         (${CGAL_INCLUDE_DIRS})
 
-#connect with ExternalLibraries.cmake via MYBOOSTHOME
-#include_directories(${Boost_INCLUDE_DIR})
-link_directories(${Boost_LIBRARY_DIR})
-find_package(Boost)
+find_package(Eigen3 3.3 REQUIRED)
+#include_directories         (${EIGEN3_INCLUDE_DIRS})
+include_directories("${CONDA_PREFIX}/include/eigen3")
+
+find_package(MPI REQUIRED)
+include_directories(${MPI_INCLUDE_PATH})
 
 find_package(OpenSSL REQUIRED)
 set(MYSSLLINKFLAGS "-lssl -lcrypto")
 
 #setting up compiler-specifics
 if(EMPLOY_GNUCOMPILER)
-	#add_definitions("-std=c++1z")
-	# set(MYVERBOSE "-fopt-info") # optimization details only
-	set(MYVERBOSE "-Wall") # all warnings
+	set(MYVERBOSE "-fopt-info-all=opt.all")
 	add_definitions("${MYOPTLEVEL}")
 	add_definitions("${MYVERBOSE}")
 	set(MYOMP "-fopenmp -lpthread")
@@ -88,52 +50,45 @@ if(EMPLOY_GNUCOMPILER)
 	add_definitions("-std=c++17")
 endif()
 
-#parallelization - MPI process-level
-#query location of MPI library
-message([STATUS] "MPI_INCLUDE_PATH ${MPI_INCLUDE_PATH}")
-if(EMPLOY_PARALLELISM_MPI)
-	find_package(MPI REQUIRED)
-	include_directories(${MPI_INCLUDE_PATH})
-endif()
-
-#specific paths of dependencies for this tool
-set(MYTOOLSRCPATH "${MYTOOLPATH}/src/cxx")
+set(MYTOOLSRCPATH "src/cxx")
+set(MYVOROSRCPATH "../../../voro++/src")
+set(COMPILEPATH "../compiled_code")
 
 #list firstly the precompiled shared aka utils, secondly the tool-specific components, lastly the tool-specific main
 add_executable(${MYPROJECTNAME}
-	${MYUTILSPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OpenSSLInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CiteMe.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ConfigShared.cpp.o
-	${MYUTILSPATH}/PARAPROBE_FilePathHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_BitMangling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_HDF5Core.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Profiling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Math.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsContinuum.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsDiscrete.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Geometry.cpp.o
-	${MYUTILSPATH}/PARAPROBE_UserStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_MPIStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PeriodicTable.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Crystallography.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OriMath.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CGALInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Solutes.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Grains.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Precipitates.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Histogram2D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TwoPointStats3D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ROIs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_VoxelTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_AABBTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_KDTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_IonCloudMemory.cpp.o
-	${MYUTILSPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
+	${COMPILEPATH}/PARAPROBE_OpenSSLInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_CiteMe.cpp.o
+	${COMPILEPATH}/PARAPROBE_ConfigShared.cpp.o
+	${COMPILEPATH}/PARAPROBE_FilePathHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_BitMangling.cpp.o
+	${COMPILEPATH}/PARAPROBE_HDF5Core.cpp.o
+	${COMPILEPATH}/PARAPROBE_Profiling.cpp.o
+	${COMPILEPATH}/PARAPROBE_Math.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsContinuum.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsDiscrete.cpp.o
+	${COMPILEPATH}/PARAPROBE_Geometry.cpp.o
+	${COMPILEPATH}/PARAPROBE_UserStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_MPIStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_PeriodicTable.cpp.o
+	${COMPILEPATH}/PARAPROBE_Crystallography.cpp.o
+	${COMPILEPATH}/PARAPROBE_OriMath.cpp.o
+	${COMPILEPATH}/PARAPROBE_CGALInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_Solutes.cpp.o
+	${COMPILEPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
+	${COMPILEPATH}/PARAPROBE_Grains.cpp.o
+	${COMPILEPATH}/PARAPROBE_Precipitates.cpp.o
+	${COMPILEPATH}/PARAPROBE_Histogram2D.cpp.o
+	${COMPILEPATH}/PARAPROBE_TwoPointStats3D.cpp.o
+	${COMPILEPATH}/PARAPROBE_ROIs.cpp.o
+	${COMPILEPATH}/PARAPROBE_VoxelTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_AABBTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_KDTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_IonCloudMemory.cpp.o
+	${COMPILEPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
 
 	${MYTOOLSRCPATH}/PARAPROBE_ConfigDistancer.cpp
 	${MYTOOLSRCPATH}/PARAPROBE_DistancerStructs.cpp
diff --git a/code/paraprobe-intersector/CMakeLists.txt b/code/paraprobe-intersector/CMakeLists.txt
index ef5976a..1803a8b 100644
--- a/code/paraprobe-intersector/CMakeLists.txt
+++ b/code/paraprobe-intersector/CMakeLists.txt
@@ -1,40 +1,17 @@
 cmake_minimum_required(VERSION 3.18.4)
 
-################################################################################################################################
-##DEVELOPER SECTION#############################################################################################################
-##in this section software developers need to make changes when debugging#######################################################
-################################################################################################################################
-#please name your project accordingly
 set(MYPROJECTNAME "paraprobe_intersector")
 message([STATUS] "Projectname is ${MYPROJECTNAME}")
-project(${MYPROJECTNAME} LANGUAGES CXX)
+project(${MYPROJECTNAME} LANGUAGES C CXX)
 set(CMAKE_BUILD_DIR "build")
 
-#pull general information about external libraries and paths related to paraprobe
-include("../PARAPROBE.Dependencies.cmake")
-message([STATUS] "MYPROJECTPATH: ${MYPROJECTPATH}")
-message([STATUS] "MYUTILSPATH: ${MYUTILSPATH}")
-message([STATUS] "MYHDF5PATH: ${MYHDFPATH}")
-message([STATUS] "MYBOOSTPATH: ${MYBOOSTPATH}")
-message([STATUS] "MYCGALPATH: ${MYCGALPATH}")
-message([STATUS] "MYEIGENPATH: ${MYEIGENPATH}")
-#message([STATUS] "MYTETGENPATH: ${MYTETGENPATH}")
-message([STATUS] "MYVOROXXPATH: ${MYVOROXXPATH}")
-
-#compose a tool-specific path
-set(MYTOOLPATH "${MYPROJECTPATH}/code/paraprobe-intersector/")
-message([STATUS] "MYTOOLPATH: ${MYTOOLPATH}")
-
-#identify which compiler to use
 set(EMPLOY_GNUCOMPILER ON)
+message([STATUS] "CONDA_PATH: ${CONDA_PREFIX}")
 message([STATUS] "MYCCC_COMPILER: __${CMAKE_C_COMPILER}__")
 message([STATUS] "MYCXX_COMPILER: __${CMAKE_CXX_COMPILER}__")
 
-#define which parallelization layers are used
 set(EMPLOY_PARALLELISM_CUDA OFF)
 
-#choose optimization level
-##-O0 nothing, debug purposes, -O1 moderate optimization, -O2 -O3 for production level up to aggressive architecture specific non-portable optimization
 if(EMPLOY_GNUCOMPILER)
 	set(MYOPTLEVEL "-O2")
 	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MYOPTLEVEL}")
@@ -42,107 +19,81 @@ if(EMPLOY_GNUCOMPILER)
 	message([STATUS] "We utilize optimization level ${MYOPTLEVEL}")
 endif()
 
-################################################################################################################################
-##END OF INTERACTION FOR NON PRO USERS##########################################################################################
-##here advanced users might want/need to make modifications if they use non default places for thirdparty libraries#############
-################################################################################################################################
-#HDF5 local installation for advanced I/O, collecting metadata and bundle analysis results together
-include_directories("${MYHDFPATH}/include")
-link_directories("${MYHDFPATH}/lib")
-set(MYHDFLINKFLAGS "-L${MYHDFPATH}/lib/ ${MYHDFPATH}/lib/libhdf5_hl.a ${MYHDFPATH}/lib/libhdf5.a ${MYHDFPATH}/lib/libz.a ${MYHDFPATH}/lib/libszaec.a ${MYHDFPATH}/lib/libaec.a -ldl")
-
-set(BOOST_ROOT "${MYBOOSTPATH}")
-set(Boost_NO_SYSTEM_PATHS ON)
-#set(Boost_INCLUDE_DIR "${MYBOOSTPATH}")
-set(CGAL_DIR "${MYCGALPATH}")
-set(EIGEN3_INCLUDE_DIR "${MYEIGENPATH}")
-include_directories("${MYEIGENPATH}")
-include_directories("${MYVOROXXPATH}/src")
-
-find_package(CGAL QUIET)
-if( CGAL_FOUND )
-	include( ${CGAL_USE_FILE} )
-	if (EMPLOY_MYEIGEN)
-		find_package(Eigen3 3.1.0 REQUIRED) #(3.1.0 or greater)
-		include(CGAL_Eigen3_support)
-		include_directories(${EIGEN3_INCLUDE_DIR})
-		if(NOT TARGET CGAL::Eigen3_support)
-			message(STATUS "This project requires the Eigen library, and will not be compiled.")
-			return()
-		endif()
-	endif()
-else()
-	message([FATAL_ERROR] "CGAL is required, employ it!")	
-endif()
+include_directories("${CONDA_PREFIX}/include/voro++")
+
+find_package(HDF5 REQUIRED)
+include_directories(${HDF5_INCLUDE_DIRS})
+set(MYHDFLINKFLAGS "-L${CONDA_PREFIX}/lib/ ${CONDA_PREFIX}/lib/libhdf5_hl.so ${CONDA_PREFIX}/lib/libhdf5.so ${CONDA_PREFIX}/lib/libz.so.1 ${CONDA_PREFIX}/lib/libsz.so ${CONDA_PREFIX}/lib/libaec.so -ldl")
+
+find_package(Boost REQUIRED)
+include_directories(${Boost_INCLUDE_DIRS})
+
+find_package(CGAL REQUIRED)
+include                     (${CGAL_USE_FILE})
+include_directories         (${CGAL_INCLUDE_DIRS})
 
-link_directories(${Boost_LIBRARY_DIR})
-find_package(Boost)
+find_package(Eigen3 3.3 REQUIRED)
+#include_directories         (${EIGEN3_INCLUDE_DIRS})
+include_directories("${CONDA_PREFIX}/include/eigen3")
 
-# include_directories("${MYTETGENPATH}")
-# link_directories("${MYTETGENPATH}")
-# set(MYTETGENLINKFLAGS "-L${MYTETGENPATH} ${MYTETGENPATH}/libtet.a")
+find_package(MPI REQUIRED)
+include_directories(${MPI_INCLUDE_PATH})
 
 find_package(OpenSSL REQUIRED)
 set(MYSSLLINKFLAGS "-lssl -lcrypto")
+
 #setting up compiler-specifics
 if(EMPLOY_GNUCOMPILER)
-	# set(MYVERBOSE "-fopt-info") # optimization details only
-	set(MYVERBOSE "-Wall") # all warnings
-	add_definitions("${MYOPTLEVEL}")
-	add_definitions("${MYVERBOSE}")
+	set(MYVERBOSE "-fopt-info-all=opt.all")
+	add_definitions("${MYOPTLEVEL} ${MYVERBOSE}")
 	set(MYOMP "-fopenmp -lpthread")
 	add_definitions(${MYOMP})
 	add_definitions("-std=c++17")
 endif()
 
-#parallelization - MPI process-level
-#query location of MPI library
-if(EMPLOY_PARALLELISM_MPI)
-	find_package(MPI REQUIRED)
-	include_directories(${MPI_INCLUDE_PATH})
-endif()
-
 #specific paths of dependencies for this tool
-set(MYTOOLSRCPATH "${MYTOOLPATH}/src/cxx")
+set(MYTOOLSRCPATH "src/cxx")
+set(MYVOROSRCPATH "../../../voro++/src")
+set(COMPILEPATH "../compiled_code")
 
 #list firstly the precompiled shared aka utils, secondly the tool-specific components, lastly the tool-specific main
 add_executable(${MYPROJECTNAME}
-	${MYUTILSPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OpenSSLInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CiteMe.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ConfigShared.cpp.o
-	${MYUTILSPATH}/PARAPROBE_FilePathHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_BitMangling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_HDF5Core.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Profiling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Math.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsContinuum.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsDiscrete.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Geometry.cpp.o
-	${MYUTILSPATH}/PARAPROBE_UserStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_MPIStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PeriodicTable.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Crystallography.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OriMath.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CGALInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Solutes.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Grains.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Precipitates.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Histogram2D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TwoPointStats3D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ROIs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_VoxelTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_AABBTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_KDTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_IonCloudMemory.cpp.o
-	${MYUTILSPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
-
-	#${MYUTILSPATH}/../../${MYPROJECTPATH}code/thirdparty/mandatory/hornus2017/intersection-detection-master/vec.cpp
-	#${MYUTILSPATH}/../../${MYPROJECTPATH}code/thirdparty/mandatory/hornus2017/intersection-detection-master/convexes.cpp
+	${COMPILEPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
+	${COMPILEPATH}/PARAPROBE_OpenSSLInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_CiteMe.cpp.o
+	${COMPILEPATH}/PARAPROBE_ConfigShared.cpp.o
+	${COMPILEPATH}/PARAPROBE_FilePathHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_BitMangling.cpp.o
+	${COMPILEPATH}/PARAPROBE_HDF5Core.cpp.o
+	${COMPILEPATH}/PARAPROBE_Profiling.cpp.o
+	${COMPILEPATH}/PARAPROBE_Math.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsContinuum.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsDiscrete.cpp.o
+	${COMPILEPATH}/PARAPROBE_Geometry.cpp.o
+	${COMPILEPATH}/PARAPROBE_UserStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_MPIStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_PeriodicTable.cpp.o
+	${COMPILEPATH}/PARAPROBE_Crystallography.cpp.o
+	${COMPILEPATH}/PARAPROBE_OriMath.cpp.o
+	${COMPILEPATH}/PARAPROBE_CGALInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_Solutes.cpp.o
+	${COMPILEPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
+	${COMPILEPATH}/PARAPROBE_Grains.cpp.o
+	${COMPILEPATH}/PARAPROBE_Precipitates.cpp.o
+	${COMPILEPATH}/PARAPROBE_Histogram2D.cpp.o
+	${COMPILEPATH}/PARAPROBE_TwoPointStats3D.cpp.o
+	${COMPILEPATH}/PARAPROBE_ROIs.cpp.o
+	${COMPILEPATH}/PARAPROBE_VoxelTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_AABBTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_KDTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_IonCloudMemory.cpp.o
+	${COMPILEPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
+
+	#${COMPILEPATH}/../../${MYPROJECTPATH}code/thirdparty/mandatory/hornus2017/intersection-detection-master/vec.cpp
+	#${COMPILEPATH}/../../${MYPROJECTPATH}code/thirdparty/mandatory/hornus2017/intersection-detection-master/convexes.cpp
 	${MYTOOLSRCPATH}/CONFIG_Intersector.cpp
 	${MYTOOLSRCPATH}/PARAPROBE_IntersectorPQPInterface.cpp
 	${MYTOOLSRCPATH}/PARAPROBE_IntersectorStructs.cpp
@@ -157,7 +108,7 @@ add_executable(${MYPROJECTNAME}
 )
 
 #linking process, the target link libraries command is specific for each tool of the toolbox
-target_link_libraries(${MYPROJECTNAME} ${MYOMP} ${MPI_LIBRARIES} ${MYTETGENLINKFLAGS} ${MYHDFLINKFLAGS} -lgmp -lm ${Boost_LIBRARIES} ${MYSSLLINKFLAGS})
+target_link_libraries(${MYPROJECTNAME} ${MYOMP} ${MPI_LIBRARIES} ${MYHDFLINKFLAGS} -lgmp -lm ${Boost_LIBRARIES} ${MYSSLLINKFLAGS})
 #target_link_libraries( ${MYPROJECTNAME} PUBLIC CGAL::Eigen3_support ${MYOMP} ${MPI_LIBRARIES} ${MYTETGENLINKFLAGS} #${MYHDFLINKFLAGS} -lgmp -lm ${Boost_LIBRARIES}) #-lgomp -lpthread ${MYOPENACCLINK} ${MYCUFFTLINKFLAGS}
 
 #target_link_libraries( ${MYPROJECTNAME} -lgomp -lpthread ${MPI_LIBRARIES} ${MYTETGENLINKFLAGS} ${MYHDFLINKFLAGS} -lm ${Boost_LIBRARIES} )
diff --git a/code/paraprobe-nanochem/CMakeLists.txt b/code/paraprobe-nanochem/CMakeLists.txt
index 032a1b4..213cf6e 100644
--- a/code/paraprobe-nanochem/CMakeLists.txt
+++ b/code/paraprobe-nanochem/CMakeLists.txt
@@ -1,156 +1,96 @@
 cmake_minimum_required(VERSION 3.18.4)
 
-################################################################################################################################
-##DEVELOPER SECTION#############################################################################################################
-##in this section software developers need to make changes when debugging#######################################################
-################################################################################################################################
-#please name your project accordingly
 set(MYPROJECTNAME "paraprobe_nanochem")
 message([STATUS] "Projectname is ${MYPROJECTNAME}")
-project(${MYPROJECTNAME} LANGUAGES CXX)
+project(${MYPROJECTNAME} LANGUAGES C CXX)
 set(CMAKE_BUILD_DIR "build")
 
-#pull general information about external libraries and paths related to paraprobe
-include("../PARAPROBE.Dependencies.cmake")
-message([STATUS] "MYPROJECTPATH: ${MYPROJECTPATH}")
-message([STATUS] "MYUTILSPATH: ${MYUTILSPATH}")
-message([STATUS] "MYHDF5PATH: ${MYHDFPATH}")
-message([STATUS] "MYBOOSTPATH: ${MYBOOSTPATH}")
-message([STATUS] "MYCGALPATH: ${MYCGALPATH}")
-message([STATUS] "MYEIGENPATH: ${MYEIGENPATH}")
-message([STATUS] "MYVOROXXPATH: ${MYVOROXXPATH}")
-
-#compose a tool-specific path
-set(MYTOOLPATH "${MYPROJECTPATH}/code/paraprobe-nanochem/")
-message([STATUS] "MYTOOLPATH: ${MYTOOLPATH}")
-
-#identify which compiler to use
 set(EMPLOY_GNUCOMPILER ON)
+message([STATUS] "CONDA_PATH: ${CONDA_PREFIX}")
 message([STATUS] "MYCCC_COMPILER: __${CMAKE_C_COMPILER}__")
 message([STATUS] "MYCXX_COMPILER: __${CMAKE_CXX_COMPILER}__")
 
-#define which parallelization layers are used
 set(EMPLOY_PARALLELISM_CUDA OFF)
 
-#choose optimization level
-##-O0 nothing, debug purposes, -O1 moderate optimization, -O2 -O3 for production level up to aggressive architecture specific non-portable optimization
 if(EMPLOY_GNUCOMPILER)
-	set(MYOPTLEVEL "-O2")  # -ggdb
-	# problems where faced with inline functions in MarchingCubes when trying to compile with O0
+	set(MYOPTLEVEL "-O2")
 	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MYOPTLEVEL}")
 	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MYOPTLEVEL}")
 	message([STATUS] "We utilize optimization level ${MYOPTLEVEL}")
 endif()
 
-################################################################################################################################
-##END OF INTERACTION FOR NON PRO USERS##########################################################################################
-##here advanced users might want/need to make modifications if they use non default places for thirdparty libraries#############
-################################################################################################################################
-#HDF5 local installation for advanced I/O, collecting metadata and bundle analysis results together
-include_directories("${MYHDFPATH}/include")
-link_directories("${MYHDFPATH}/lib")
-set(MYHDFLINKFLAGS "-L${MYHDFPATH}/lib/ ${MYHDFPATH}/lib/libhdf5_hl.a ${MYHDFPATH}/lib/libhdf5.a ${MYHDFPATH}/lib/libz.a ${MYHDFPATH}/lib/libszaec.a ${MYHDFPATH}/lib/libaec.a -ldl")
-
-set(BOOST_ROOT "${MYBOOSTPATH}")
-set(Boost_NO_SYSTEM_PATHS ON)
-#set(Boost_INCLUDE_DIR "${MYBOOSTPATH}")
-#include_directories("${MYCGALPATH}")
-set(CGAL_DIR "${MYCGALPATH}")
-set(EIGEN3_INCLUDE_DIR "${MYEIGENPATH}")
-include_directories("${MYEIGENPATH}")
-include_directories("${MYVOROXXPATH}/src")
-
-#if(EMPLOY_MYEIGEN)
-#	#use eigen if available
-#	find_package(EIGEN3)
-#	if ( EIGEN3_FOUND )
-#		add_definitions(-DCGAL_EIGEN3_ENABLED)
-#		message([STATUS] "Eigen3 found and enabled !")
-#	endif()
-#endif()
-
-option(CGAL_HAS_THREADS "Use thread-safe parts of CGAL instead of assuming non thread-safe code" ON)
-find_package(CGAL QUIET)
-if( CGAL_FOUND )
-	include( ${CGAL_USE_FILE} )
-	if (EMPLOY_MYEIGEN)
-		find_package(Eigen3 3.1.0 REQUIRED) #(3.1.0 or greater)
-		include(CGAL_Eigen3_support)
-		if(NOT TARGET CGAL::Eigen3_support)
-			message(STATUS "This project requires the Eigen library, and will not be compiled.")
-		endif()
-	endif()
-else()
-	message([FATAL_ERROR] "CGAL is required, employ it!")
-endif()
+include_directories("${CONDA_PREFIX}/include/voro++")
+
+find_package(HDF5 REQUIRED)
+include_directories(${HDF5_INCLUDE_DIRS})
+set(MYHDFLINKFLAGS "-L${CONDA_PREFIX}/lib/ ${CONDA_PREFIX}/lib/libhdf5_hl.so ${CONDA_PREFIX}/lib/libhdf5.so ${CONDA_PREFIX}/lib/libz.so.1 ${CONDA_PREFIX}/lib/libsz.so ${CONDA_PREFIX}/lib/libaec.so -ldl")
+
+find_package(Boost REQUIRED)
+include_directories(${Boost_INCLUDE_DIRS})
 
-link_directories(${Boost_LIBRARY_DIR})
-find_package(Boost)
+find_package(CGAL REQUIRED)
+include                     (${CGAL_USE_FILE})
+include_directories         (${CGAL_INCLUDE_DIRS})
 
-# include_directories("${MYTETGENPATH}")
-# link_directories("${MYTETGENPATH}")
-# set(MYTETGENLINKFLAGS "-L${MYTETGENPATH} ${MYTETGENPATH}/libtet.a")
+find_package(Eigen3 3.3 REQUIRED)
+#include_directories         (${EIGEN3_INCLUDE_DIRS})
+include_directories("${CONDA_PREFIX}/include/eigen3")
+
+find_package(MPI REQUIRED)
+include_directories(${MPI_INCLUDE_PATH})
 
 find_package(OpenSSL REQUIRED)
 set(MYSSLLINKFLAGS "-lssl -lcrypto")
 
 #setting up compiler-specifics
 if(EMPLOY_GNUCOMPILER)
-	# set(MYVERBOSE "-fopt-info") # optimization details only
-	set(MYVERBOSE "-Wall") # all warnings
-	add_definitions("${MYOPTLEVEL}")
-	add_definitions("${MYVERBOSE}")
+	set(MYVERBOSE "-fopt-info-all=opt.all")
+	add_definitions("${MYOPTLEVEL} ${MYVERBOSE}")
 	set(MYOMP "-fopenmp -lpthread")
 	add_definitions(${MYOMP})
 	add_definitions("-std=c++17")
 endif()
 
-#parallelization - MPI process-level
-#query location of MPI library
-message([STATUS] "MPI_INCLUDE_PATH ${MPI_INCLUDE_PATH}")
-if(EMPLOY_PARALLELISM_MPI)
-	find_package(MPI REQUIRED)
-	include_directories(${MPI_INCLUDE_PATH})
-endif()
-
 #specific paths of dependencies for this tool
-set(MYTOOLSRCPATH "${MYTOOLPATH}/src/cxx")
+set(MYTOOLSRCPATH "src/cxx")
+set(MYVOROSRCPATH "../../../voro++/src")
+set(COMPILEPATH "../compiled_code")
 
 #list firstly the precompiled shared aka utils, secondly the tool-specific components, lastly the tool-specific main
 add_executable(${MYPROJECTNAME}
-	${MYUTILSPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OpenSSLInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CiteMe.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ConfigShared.cpp.o
-	${MYUTILSPATH}/PARAPROBE_FilePathHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_BitMangling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_HDF5Core.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Profiling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Math.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsContinuum.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsDiscrete.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Geometry.cpp.o
-	${MYUTILSPATH}/PARAPROBE_UserStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_MPIStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PeriodicTable.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Crystallography.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OriMath.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CGALInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Solutes.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Grains.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Precipitates.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Histogram2D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TwoPointStats3D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ROIs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_VoxelTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_AABBTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_KDTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_IonCloudMemory.cpp.o
-	${MYUTILSPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
+	${COMPILEPATH}/PARAPROBE_OpenSSLInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_CiteMe.cpp.o
+	${COMPILEPATH}/PARAPROBE_ConfigShared.cpp.o
+	${COMPILEPATH}/PARAPROBE_FilePathHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_BitMangling.cpp.o
+	${COMPILEPATH}/PARAPROBE_HDF5Core.cpp.o
+	${COMPILEPATH}/PARAPROBE_Profiling.cpp.o
+	${COMPILEPATH}/PARAPROBE_Math.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsContinuum.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsDiscrete.cpp.o
+	${COMPILEPATH}/PARAPROBE_Geometry.cpp.o
+	${COMPILEPATH}/PARAPROBE_UserStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_MPIStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_PeriodicTable.cpp.o
+	${COMPILEPATH}/PARAPROBE_Crystallography.cpp.o
+	${COMPILEPATH}/PARAPROBE_OriMath.cpp.o
+	${COMPILEPATH}/PARAPROBE_CGALInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_Solutes.cpp.o
+	${COMPILEPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
+	${COMPILEPATH}/PARAPROBE_Grains.cpp.o
+	${COMPILEPATH}/PARAPROBE_Precipitates.cpp.o
+	${COMPILEPATH}/PARAPROBE_Histogram2D.cpp.o
+	${COMPILEPATH}/PARAPROBE_TwoPointStats3D.cpp.o
+	${COMPILEPATH}/PARAPROBE_ROIs.cpp.o
+	${COMPILEPATH}/PARAPROBE_VoxelTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_AABBTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_KDTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_IonCloudMemory.cpp.o
+	${COMPILEPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
 
 	${MYTOOLSRCPATH}/PARAPROBE_ConfigNanochem.cpp
 	${MYTOOLSRCPATH}/PARAPROBE_NanochemMCInterface.cpp
@@ -172,7 +112,7 @@ add_executable(${MYPROJECTNAME}
 )
 
 #linking process, the target link libraries command is specific for each tool of the toolbox
-target_link_libraries(${MYPROJECTNAME} ${MYOMP} ${MPI_LIBRARIES} ${MYTETGENLINKFLAGS} ${MYHDFLINKFLAGS} -lgmp -lm ${Boost_LIBRARIES} ${MYSSLLINKFLAGS}) #PUBLIC CGAL::Eigen3_support -lgomp -lpthread#${MYOPENACCLINK} ${MYCUFFTLINKFLAGS} 
+target_link_libraries(${MYPROJECTNAME} ${MYOMP} ${MPI_LIBRARIES} ${MYHDFLINKFLAGS} -lgmp -lm ${Boost_LIBRARIES} ${MYSSLLINKFLAGS}) #PUBLIC CGAL::Eigen3_support -lgomp -lpthread#${MYOPENACCLINK} ${MYCUFFTLINKFLAGS} 
 
 #MPI compilation settings
 if(MPI_COMPILE_FLAGS)
diff --git a/code/paraprobe-parmsetup/src/python/paraprobe_parmsetup.py b/code/paraprobe-parmsetup/src/python/paraprobe_parmsetup.py
deleted file mode 100644
index 5aa4acd..0000000
--- a/code/paraprobe-parmsetup/src/python/paraprobe_parmsetup.py
+++ /dev/null
@@ -1,32 +0,0 @@
-#
-# This file is part of paraprobe-toolbox.
-#
-# paraprobe-toolbox is free software: you can redistribute it and/or modify it
-# under the terms of the GNU General Public License as published by the
-# Free Software Foundation, either version 3 of the License,
-#  or (at your option) any later version.
-#
-# paraprobe-toolbox is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-# See the GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with paraprobe-toolbox. If not, see <https://www.gnu.org/licenses/>.
-#
-# Convenience wrapper to simply access to the guru interface of paraprobe
-
-
-from tools.transcoder_config import ParmsetupTranscoder
-from tools.ranger_config import ParmsetupRanger
-from tools.surfacer_config import ParmsetupSurfacer
-from tools.distancer_config import ParmsetupDistancer
-from tools.tessellator_config import ParmsetupTessellator
-from tools.spatstat_config import ParmsetupSpatstat
-from tools.nanochem_config import ParmsetupNanochem
-from tools.intersector_config import ParmsetupIntersector
-# clusterer?
-
-from utils.primscontinuum import RoiRotatedCuboid
-from utils.primscontinuum import RoiRotatedCylinder
-from utils.primscontinuum import RoiSphere
diff --git a/code/paraprobe-parmsetup/src/python/tools/__init__.py b/code/paraprobe-parmsetup/src/python/tools/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/code/paraprobe-parmsetup/src/python/tools/clusterer_config.py b/code/paraprobe-parmsetup/src/python/tools/clusterer_config.py
index 740a8df..ae1a026 100644
--- a/code/paraprobe-parmsetup/src/python/tools/clusterer_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/clusterer_config.py
@@ -28,14 +28,14 @@ from os.path import exists
 from ase.data import atomic_numbers, chemical_symbols
 from ifes_apt_tc_data_modeling.utils.nist_isotope_data import isotopes
 
-from .utils.numerics import \
+from paraprobe_parmsetup.utils.numerics import \
     TOOLS_IN_TOOLBOX, EPSILON, MAX_NUMBER_OF_ATOMS_PER_MOLECULAR_ION
 
-from .utils.hashing import get_file_hashvalue
+from paraprobe_parmsetup.utils.hashing import get_file_hashvalue
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 
 def symbol_lst_to_matrix_of_isotope_vector(
diff --git a/code/paraprobe-parmsetup/src/python/tools/distancer_config.py b/code/paraprobe-parmsetup/src/python/tools/distancer_config.py
index 41ed2b2..21de99e 100644
--- a/code/paraprobe-parmsetup/src/python/tools/distancer_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/distancer_config.py
@@ -19,13 +19,13 @@
 
 import numpy as np
 
-from .utils.numerics import TOOLS_IN_TOOLBOX, EPSILON
+from paraprobe_parmsetup.utils.numerics import TOOLS_IN_TOOLBOX, EPSILON
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
-from .utils.hashing import get_file_hashvalue
+from paraprobe_parmsetup.utils.hashing import get_file_hashvalue
 
 
 class PointToTriangleSoupDistancing(ParmsetupTaskBase):
diff --git a/code/paraprobe-parmsetup/src/python/tools/intersector_config.py b/code/paraprobe-parmsetup/src/python/tools/intersector_config.py
index f9481aa..7aaa98a 100644
--- a/code/paraprobe-parmsetup/src/python/tools/intersector_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/intersector_config.py
@@ -21,13 +21,13 @@ import numpy as np
 
 from ase.data import atomic_numbers
 
-from .utils.numerics import TOOLS_IN_TOOLBOX, EPSILON
+from paraprobe_parmsetup.utils.numerics import TOOLS_IN_TOOLBOX, EPSILON
 
-from .utils.hashing import get_file_hashvalue
+from paraprobe_parmsetup.utils.hashing import get_file_hashvalue
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 
 class VolumeFeatureSubSet:
diff --git a/code/paraprobe-parmsetup/src/python/tools/nanochem_config.py b/code/paraprobe-parmsetup/src/python/tools/nanochem_config.py
index 7cf9102..2e98043 100644
--- a/code/paraprobe-parmsetup/src/python/tools/nanochem_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/nanochem_config.py
@@ -25,14 +25,14 @@ from os.path import exists
 
 from ase.data import atomic_numbers, chemical_symbols
 
-from .utils.numerics import \
+from paraprobe_parmsetup.utils.numerics import \
     TOOLS_IN_TOOLBOX, EPSILON, MAX_NUMBER_OF_ATOMS_PER_MOLECULAR_ION
 
-from .utils.hashing import get_file_hashvalue
+from paraprobe_parmsetup.utils.hashing import get_file_hashvalue
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 
 class NanochemTask(ParmsetupTaskBase):
diff --git a/code/paraprobe-parmsetup/src/python/tools/ranger_config.py b/code/paraprobe-parmsetup/src/python/tools/ranger_config.py
index 6c9199c..76b59fe 100644
--- a/code/paraprobe-parmsetup/src/python/tools/ranger_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/ranger_config.py
@@ -25,12 +25,12 @@ import numpy as np
 
 from ase.data import atomic_numbers, chemical_symbols
 
-from .utils.numerics import \
+from paraprobe_parmsetup.utils.numerics import \
     TOOLS_IN_TOOLBOX, EPSILON, MAX_NUMBER_OF_ATOMS_PER_MOLECULAR_ION
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 from ifes_apt_tc_data_modeling.utils.nist_isotope_data import isotopes
 
diff --git a/code/paraprobe-parmsetup/src/python/tools/selector_config.py b/code/paraprobe-parmsetup/src/python/tools/selector_config.py
index 261747c..f0a0099 100644
--- a/code/paraprobe-parmsetup/src/python/tools/selector_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/selector_config.py
@@ -25,13 +25,13 @@ import numpy as np
 
 from os.path import exists
 
-from .utils.numerics import TOOLS_IN_TOOLBOX
+from paraprobe_parmsetup.utils.numerics import TOOLS_IN_TOOLBOX
 
-from .utils.hashing import get_file_hashvalue
+from paraprobe_parmsetup.utils.hashing import get_file_hashvalue
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 
 class RoiSelectionTask(ParmsetupTaskBase):
diff --git a/code/paraprobe-parmsetup/src/python/tools/spatstat_config.py b/code/paraprobe-parmsetup/src/python/tools/spatstat_config.py
index 09b3cc0..1cd21c0 100644
--- a/code/paraprobe-parmsetup/src/python/tools/spatstat_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/spatstat_config.py
@@ -28,15 +28,15 @@ from os.path import exists
 from ase.data import atomic_numbers, chemical_symbols
 from ifes_apt_tc_data_modeling.utils.nist_isotope_data import isotopes
 
-from .utils.numerics import TOOLS_IN_TOOLBOX, EPSILON
+from paraprobe_parmsetup.utils.numerics import TOOLS_IN_TOOLBOX, EPSILON
 
-from .utils.numerics import MAX_NUMBER_OF_ATOMS_PER_MOLECULAR_ION
+from paraprobe_parmsetup.utils.numerics import MAX_NUMBER_OF_ATOMS_PER_MOLECULAR_ION
 
-from .utils.hashing import get_file_hashvalue
+from paraprobe_parmsetup.utils.hashing import get_file_hashvalue
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 ## move this function to utils as it is reused for configuring multiple tools
 def symbol_lst_to_matrix_of_isotope_vector(
diff --git a/code/paraprobe-parmsetup/src/python/tools/surfacer_config.py b/code/paraprobe-parmsetup/src/python/tools/surfacer_config.py
index a38e1a3..85e8da3 100644
--- a/code/paraprobe-parmsetup/src/python/tools/surfacer_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/surfacer_config.py
@@ -19,11 +19,11 @@
 
 import numpy as np
 
-from .utils.numerics import TOOLS_IN_TOOLBOX, EPSILON
+from paraprobe_parmsetup.utils.numerics import TOOLS_IN_TOOLBOX, EPSILON
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 
 class SurfaceMeshingTask(ParmsetupTaskBase):
diff --git a/code/paraprobe-parmsetup/src/python/tools/tessellator_config.py b/code/paraprobe-parmsetup/src/python/tools/tessellator_config.py
index e0c3fe5..c39c87f 100644
--- a/code/paraprobe-parmsetup/src/python/tools/tessellator_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/tessellator_config.py
@@ -19,13 +19,13 @@
 
 import numpy as np
 
-from .utils.numerics import TOOLS_IN_TOOLBOX
+from paraprobe_parmsetup.utils.numerics import TOOLS_IN_TOOLBOX
 
-from .utils.hashing import get_file_hashvalue
+from paraprobe_parmsetup.utils.hashing import get_file_hashvalue
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 
 class TessellationTask(ParmsetupTaskBase):
diff --git a/code/paraprobe-parmsetup/src/python/tools/transcoder_config.py b/code/paraprobe-parmsetup/src/python/tools/transcoder_config.py
index 305654d..a001f72 100644
--- a/code/paraprobe-parmsetup/src/python/tools/transcoder_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/transcoder_config.py
@@ -19,13 +19,13 @@
 
 import numpy as np
 
-from .utils.numerics import TOOLS_IN_TOOLBOX
+from paraprobe_parmsetup.utils.numerics import TOOLS_IN_TOOLBOX
 
-from .utils.hashing import get_file_hashvalue
+from paraprobe_parmsetup.utils.hashing import get_file_hashvalue
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 
 class TranscodingTask(ParmsetupTaskBase):
diff --git a/code/paraprobe-parmsetup/src/python/tools/utils/felfergroup.py b/code/paraprobe-parmsetup/src/python/tools/utils/felfergroup.py
index 1eb744a..3ebcd0f 100644
--- a/code/paraprobe-parmsetup/src/python/tools/utils/felfergroup.py
+++ b/code/paraprobe-parmsetup/src/python/tools/utils/felfergroup.py
@@ -65,7 +65,7 @@ tmp.pop()
 ivec = []
 for isotope in tmp:
     neutron = 0  # else
-    chemical_symbol = # strip these
+    chemical_symbol = ""# strip these
     proton = atomic_numbers[chemical_symbol]
     ivec.append(hash_isotope(proton, neutron))
 del tmp
diff --git a/code/paraprobe-parmsetup/src/python/tools/utils/filters.py b/code/paraprobe-parmsetup/src/python/tools/utils/filters.py
index 9aff6c7..18df491 100644
--- a/code/paraprobe-parmsetup/src/python/tools/utils/filters.py
+++ b/code/paraprobe-parmsetup/src/python/tools/utils/filters.py
@@ -22,7 +22,7 @@
 
 import numpy as np
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
 
 class EvaporationIdFilter:
diff --git a/code/paraprobe-parmsetup/src/python/tools/utils/primscontinuum.py b/code/paraprobe-parmsetup/src/python/tools/utils/primscontinuum.py
index 0754dcb..4203eb3 100644
--- a/code/paraprobe-parmsetup/src/python/tools/utils/primscontinuum.py
+++ b/code/paraprobe-parmsetup/src/python/tools/utils/primscontinuum.py
@@ -18,7 +18,7 @@
 
 import numpy as np
 
-from .numerics import EPSILON
+from paraprobe_parmsetup.utils.numerics import EPSILON
 
 
 class RoiRotatedCuboid:
diff --git a/code/paraprobe-ranger/CMakeLists.txt b/code/paraprobe-ranger/CMakeLists.txt
index 208a709..0588a4b 100755
--- a/code/paraprobe-ranger/CMakeLists.txt
+++ b/code/paraprobe-ranger/CMakeLists.txt
@@ -1,34 +1,17 @@
 cmake_minimum_required(VERSION 3.18.4)
 
-################################################################################################################################
-##DEVELOPER SECTION#############################################################################################################
-##in this section software developers need to make changes when debugging#######################################################
-################################################################################################################################
-#please name your project accordingly
 set(MYPROJECTNAME "paraprobe_ranger")
 message([STATUS] "Projectname is ${MYPROJECTNAME}")
-project(${MYPROJECTNAME} LANGUAGES CXX)
+project(${MYPROJECTNAME} LANGUAGES C CXX)
 set(CMAKE_BUILD_DIR "build")
 
-#pull general information about external libraries and paths related to paraprobe
-include("../PARAPROBE.Dependencies.cmake")
-message([STATUS] "MYPROJECTPATH: ${MYPROJECTPATH}")
-message([STATUS] "MYUTILSPATH: ${MYUTILSPATH}")
-message([STATUS] "MYHDF5PATH: ${MYHDFPATH}")
-message([STATUS] "MYVOROXXPATH: ${MYVOROXXPATH}")
-
-#compose a tool-specific path
-set(MYTOOLPATH "${MYPROJECTPATH}/code/paraprobe-ranger/")
-message([STATUS] "MYTOOLPATH: ${MYTOOLPATH}")
 set(EMPLOY_GNUCOMPILER ON)
+message([STATUS] "CONDA_PATH: ${CONDA_PREFIX}")
 message([STATUS] "MYCCC_COMPILER: __${CMAKE_C_COMPILER}__")
 message([STATUS] "MYCXX_COMPILER: __${CMAKE_CXX_COMPILER}__")
 
-#define which parallelization layers are used
 set(EMPLOY_PARALLELISM_CUDA OFF)
 
-#choose optimization level
-##-O0 nothing, debug purposes, -O1 moderate optimization, -O2 -O3 for production level up to aggressive architecture specific non-portable optimization
 if(EMPLOY_GNUCOMPILER)
 	set(MYOPTLEVEL "-O2")
 	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MYOPTLEVEL}")
@@ -36,103 +19,79 @@ if(EMPLOY_GNUCOMPILER)
 	message([STATUS] "We utilize optimization level ${MYOPTLEVEL}")
 endif()
 
-################################################################################################################################
-##END OF INTERACTION FOR NON PRO USERS##########################################################################################
-##here advanced users might want/need to make modifications if they use non default places for thirdparty libraries#############
-################################################################################################################################
-#HDF5 local installation for advanced I/O, collecting metadata and bundle analysis results together
-include_directories("${MYHDFPATH}/include")
-link_directories("${MYHDFPATH}/lib")
-set(MYHDFLINKFLAGS "-L${MYHDFPATH}/lib/ ${MYHDFPATH}/lib/libhdf5_hl.a ${MYHDFPATH}/lib/libhdf5.a ${MYHDFPATH}/lib/libz.a ${MYHDFPATH}/lib/libszaec.a ${MYHDFPATH}/lib/libaec.a -ldl")
-
-set(BOOST_ROOT "${MYBOOSTPATH}")
-set(Boost_NO_SYSTEM_PATHS ON)
-#set(Boost_INCLUDE_DIR "${MYBOOSTPATH}")
-#include_directories("${MYCGALPATH}")
-set(CGAL_DIR "${MYCGALPATH}")
-include_directories("${MYEIGENPATH}")
-include_directories("${MYVOROXXPATH}/src")
-
-#GMP and MPFR is included and found alongside the CGAL library
-#connect with ExternalLibraries.cmake via MYCGALHOME and MYEIGENHOME
-find_package(CGAL QUIET)
-if( CGAL_FOUND )
-	include( ${CGAL_USE_FILE} )
-	if (EMPLOY_MYEIGEN)
-		find_package(Eigen3 3.1.0 REQUIRED) #(3.1.0 or greater)
-		include(CGAL_Eigen3_support)
-		if(NOT TARGET CGAL::Eigen3_support)
-			message(STATUS "This project requires the Eigen library, and will not be compiled.")
-			return()
-		endif()
-	endif()
-endif()
 
-#connect with ExternalLibraries.cmake via MYBOOSTHOME
-#include_directories(${Boost_INCLUDE_DIR})
-link_directories(${Boost_LIBRARY_DIR})
-find_package(Boost)
+include_directories("${CONDA_PREFIX}/include/voro++")
+
+find_package(HDF5 REQUIRED)
+include_directories(${HDF5_INCLUDE_DIRS})
+set(MYHDFLINKFLAGS "-L${CONDA_PREFIX}/lib/ ${CONDA_PREFIX}/lib/libhdf5_hl.so ${CONDA_PREFIX}/lib/libhdf5.so ${CONDA_PREFIX}/lib/libz.so.1 ${CONDA_PREFIX}/lib/libsz.so ${CONDA_PREFIX}/lib/libaec.so -ldl")
+
+find_package(Boost REQUIRED)
+include_directories(${Boost_INCLUDE_DIRS})
+
+find_package(CGAL REQUIRED)
+include                     (${CGAL_USE_FILE})
+include_directories         (${CGAL_INCLUDE_DIRS})
+
+find_package(Eigen3 3.3 REQUIRED)
+#include_directories         (${EIGEN3_INCLUDE_DIRS})
+include_directories("${CONDA_PREFIX}/include/eigen3")
+
+find_package(MPI REQUIRED)
+include_directories(${MPI_INCLUDE_PATH})
 
 find_package(OpenSSL REQUIRED)
 set(MYSSLLINKFLAGS "-lssl -lcrypto")
 
 #setting up compiler-specifics
 if(EMPLOY_GNUCOMPILER)
-	# set(MYVERBOSE "-fopt-info") # optimization details only
-	set(MYVERBOSE "-Wall") # all warnings
-	add_definitions("${MYOPTLEVEL}")
-	add_definitions("${MYVERBOSE}")
+	set(MYVERBOSE "-fopt-info-all=opt.all")
+	add_definitions("${MYOPTLEVEL} ${MYVERBOSE}")
 	set(MYOMP "-fopenmp -lpthread")
 	add_definitions(${MYOMP})
 	add_definitions("-std=c++17")
 endif()
 
-#parallelization - MPI process-level
-#query location of MPI library
-message([STATUS] "MPI_INCLUDE_PATH ${MPI_INCLUDE_PATH}")
-if(EMPLOY_PARALLELISM_MPI)
-	find_package(MPI REQUIRED)
-	include_directories(${MPI_INCLUDE_PATH})
-endif()
-
 #specific paths of dependencies for this tool
-set(MYTOOLSRCPATH "${MYTOOLPATH}/src/cxx")
+set(MYTOOLSRCPATH "src/cxx")
+set(MYVOROSRCPATH "../../../voro++/src")
+set(COMPILEPATH "../compiled_code")
 
 #list firstly the precompiled shared aka utils, secondly the tool-specific components, lastly the tool-specific main
 add_executable(${MYPROJECTNAME}
-	${MYUTILSPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OpenSSLInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CiteMe.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ConfigShared.cpp.o
-	${MYUTILSPATH}/PARAPROBE_FilePathHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_BitMangling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_HDF5Core.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Profiling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Math.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsContinuum.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsDiscrete.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Geometry.cpp.o
-	${MYUTILSPATH}/PARAPROBE_UserStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_MPIStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PeriodicTable.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Crystallography.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OriMath.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CGALInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Solutes.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Grains.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Precipitates.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Histogram2D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TwoPointStats3D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ROIs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_VoxelTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_AABBTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_KDTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_IonCloudMemory.cpp.o
-	${MYUTILSPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
+	${COMPILEPATH}/PARAPROBE_OpenSSLInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_CiteMe.cpp.o
+	${COMPILEPATH}/PARAPROBE_ConfigShared.cpp.o
+	${COMPILEPATH}/PARAPROBE_FilePathHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_BitMangling.cpp.o
+	${COMPILEPATH}/PARAPROBE_HDF5Core.cpp.o
+	${COMPILEPATH}/PARAPROBE_Profiling.cpp.o
+	${COMPILEPATH}/PARAPROBE_Math.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsContinuum.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsDiscrete.cpp.o
+	${COMPILEPATH}/PARAPROBE_Geometry.cpp.o
+	${COMPILEPATH}/PARAPROBE_UserStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_MPIStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_PeriodicTable.cpp.o
+	${COMPILEPATH}/PARAPROBE_Crystallography.cpp.o
+	${COMPILEPATH}/PARAPROBE_OriMath.cpp.o
+	${COMPILEPATH}/PARAPROBE_CGALInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_Solutes.cpp.o
+	${COMPILEPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
+	${COMPILEPATH}/PARAPROBE_Grains.cpp.o
+	${COMPILEPATH}/PARAPROBE_Precipitates.cpp.o
+	${COMPILEPATH}/PARAPROBE_Histogram2D.cpp.o
+	${COMPILEPATH}/PARAPROBE_TwoPointStats3D.cpp.o
+	${COMPILEPATH}/PARAPROBE_ROIs.cpp.o
+	${COMPILEPATH}/PARAPROBE_VoxelTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_AABBTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_KDTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_IonCloudMemory.cpp.o
+	${COMPILEPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
 
 	${MYTOOLSRCPATH}/PARAPROBE_ConfigRanger.cpp
 	${MYTOOLSRCPATH}/PARAPROBE_RangerStructs.cpp
diff --git a/code/paraprobe-spatstat/CMakeLists.txt b/code/paraprobe-spatstat/CMakeLists.txt
index 04d31c4..5e5d828 100644
--- a/code/paraprobe-spatstat/CMakeLists.txt
+++ b/code/paraprobe-spatstat/CMakeLists.txt
@@ -1,35 +1,18 @@
 cmake_minimum_required(VERSION 3.18.4)
 
-################################################################################################################################
-##DEVELOPER SECTION#############################################################################################################
-##in this section software developers need to make changes when debugging#######################################################
-################################################################################################################################
-
 #please name your project accordingly
 set(MYPROJECTNAME "paraprobe_spatstat")
 message([STATUS] "Projectname is ${MYPROJECTNAME}")
-project(${MYPROJECTNAME} LANGUAGES CXX)
+project(${MYPROJECTNAME} LANGUAGES C CXX)
 set(CMAKE_BUILD_DIR "build")
 
-#pull general information about external libraries and paths related to paraprobe
-include("../PARAPROBE.Dependencies.cmake")
-message([STATUS] "MYPROJECTPATH: ${MYPROJECTPATH}")
-message([STATUS] "MYUTILSPATH: ${MYUTILSPATH}")
-message([STATUS] "MYHDF5PATH: ${MYHDFPATH}")
-message([STATUS] "MYVOROXXPATH: ${MYVOROXXPATH}")
-
-#compose a tool-specific path
-set(MYTOOLPATH "${MYPROJECTPATH}/code/paraprobe-spatstat/")
-message([STATUS] "MYTOOLPATH: ${MYTOOLPATH}")
 set(EMPLOY_GNUCOMPILER ON)
+message([STATUS] "CONDA_PATH: ${CONDA_PREFIX}")
 message([STATUS] "MYCCC_COMPILER: __${CMAKE_C_COMPILER}__")
 message([STATUS] "MYCXX_COMPILER: __${CMAKE_CXX_COMPILER}__")
 
-#define which parallelization layers are used
 set(EMPLOY_PARALLELISM_CUDA OFF)
 
-#choose optimization level
-##-O0 nothing, debug purposes, -O1 moderate optimization, -O2 -O3 for production level up to aggressive architecture specific non-portable optimization
 if(EMPLOY_GNUCOMPILER)
 	set(MYOPTLEVEL "-O2")
 	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MYOPTLEVEL}")
@@ -37,102 +20,78 @@ if(EMPLOY_GNUCOMPILER)
 	message([STATUS] "We utilize optimization level ${MYOPTLEVEL}")
 endif()
 
-################################################################################################################################
-##END OF INTERACTION FOR NON PRO USERS##########################################################################################
-##here advanced users might want/need to make modifications if they use non default places for thirdparty libraries#############
-################################################################################################################################
-#HDF5 local installation for advanced I/O, collecting metadata and bundle analysis results together
-include_directories("${MYHDFPATH}/include")
-link_directories("${MYHDFPATH}/lib")
-set(MYHDFLINKFLAGS "-L${MYHDFPATH}/lib/ ${MYHDFPATH}/lib/libhdf5_hl.a ${MYHDFPATH}/lib/libhdf5.a ${MYHDFPATH}/lib/libz.a ${MYHDFPATH}/lib/libszaec.a ${MYHDFPATH}/lib/libaec.a -ldl")
-
-set(BOOST_ROOT "${MYBOOSTPATH}")
-set(Boost_NO_SYSTEM_PATHS ON)
-#set(Boost_INCLUDE_DIR "${MYBOOSTPATH}")
-#include_directories("${MYCGALPATH}")
-set(CGAL_DIR "${MYCGALPATH}")
-include_directories("${MYEIGENPATH}")
-include_directories("${MYVOROXXPATH}/src")
-
-#GMP and MPFR is included and found alongside the CGAL library
-#connect with ExternalLibraries.cmake via MYCGALHOME and MYEIGENHOME
-find_package(CGAL QUIET)
-if( CGAL_FOUND )
-	include( ${CGAL_USE_FILE} )
-	if (EMPLOY_MYEIGEN)
-		find_package(Eigen3 3.1.0 REQUIRED) #(3.1.0 or greater)
-		include(CGAL_Eigen3_support)
-		if(NOT TARGET CGAL::Eigen3_support)
-			message(STATUS "This project requires the Eigen library, and will not be compiled.")
-			return()
-		endif()
-	endif()
-endif()
+include_directories("${CONDA_PREFIX}/include/voro++")
+
+find_package(HDF5 REQUIRED)
+include_directories(${HDF5_INCLUDE_DIRS})
+set(MYHDFLINKFLAGS "-L${CONDA_PREFIX}/lib/ ${CONDA_PREFIX}/lib/libhdf5_hl.so ${CONDA_PREFIX}/lib/libhdf5.so ${CONDA_PREFIX}/lib/libz.so.1 ${CONDA_PREFIX}/lib/libsz.so ${CONDA_PREFIX}/lib/libaec.so -ldl")
+
+find_package(Boost REQUIRED)
+include_directories(${Boost_INCLUDE_DIRS})
 
-#connect with ExternalLibraries.cmake via MYBOOSTHOME
-#include_directories(${Boost_INCLUDE_DIR})
-link_directories(${Boost_LIBRARY_DIR})
-find_package(Boost)
+find_package(CGAL REQUIRED)
+include                     (${CGAL_USE_FILE})
+include_directories         (${CGAL_INCLUDE_DIRS})
+
+find_package(Eigen3 3.3 REQUIRED)
+#include_directories         (${EIGEN3_INCLUDE_DIRS})
+include_directories("${CONDA_PREFIX}/include/eigen3")
+
+find_package(MPI REQUIRED)
+include_directories(${MPI_INCLUDE_PATH})
 
 find_package(OpenSSL REQUIRED)
 set(MYSSLLINKFLAGS "-lssl -lcrypto")
+
 #setting up compiler-specifics
 if(EMPLOY_GNUCOMPILER)
-	# set(MYVERBOSE "-fopt-info") # optimization details only
-	set(MYVERBOSE "-Wall") # all warnings
-	add_definitions("${MYOPTLEVEL}")
-	add_definitions("${MYVERBOSE}")
+	set(MYVERBOSE "-fopt-info-all=opt.all")
+	add_definitions("${MYOPTLEVEL} ${MYVERBOSE}")
 	set(MYOMP "-fopenmp -lpthread")
 	add_definitions(${MYOMP})
-	add_definitions("-std=c++17")
-endif()
-
-#parallelization - MPI process-level
-#query location of MPI library
-message([STATUS] "MPI_INCLUDE_PATH ${MPI_INCLUDE_PATH}")
-if(EMPLOY_PARALLELISM_MPI)
-	find_package(MPI REQUIRED)
-	include_directories(${MPI_INCLUDE_PATH})
+	add_definitions("-std=c++14")
 endif()
 
 #specific paths of dependencies for this tool
-set(MYTOOLSRCPATH "${MYTOOLPATH}/src/cxx")
+set(MYTOOLSRCPATH "src/cxx")
+set(MYVOROSRCPATH "../../../voro++/src")
+set(COMPILEPATH "../compiled_code")
 
 #list firstly the precompiled shared aka utils, secondly the tool-specific components, lastly the tool-specific main
 add_executable(${MYPROJECTNAME}
-	${MYUTILSPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OpenSSLInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CiteMe.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ConfigShared.cpp.o
-	${MYUTILSPATH}/PARAPROBE_FilePathHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_BitMangling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_HDF5Core.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Profiling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Math.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsContinuum.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsDiscrete.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Geometry.cpp.o
-	${MYUTILSPATH}/PARAPROBE_UserStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_MPIStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PeriodicTable.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Crystallography.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OriMath.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CGALInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Solutes.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Grains.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Precipitates.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Histogram2D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TwoPointStats3D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ROIs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_VoxelTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_AABBTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_KDTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_IonCloudMemory.cpp.o
-	${MYUTILSPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
+	${COMPILEPATH}/PARAPROBE_OpenSSLInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_CiteMe.cpp.o
+	${COMPILEPATH}/PARAPROBE_ConfigShared.cpp.o
+	${COMPILEPATH}/PARAPROBE_FilePathHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_BitMangling.cpp.o
+	${COMPILEPATH}/PARAPROBE_HDF5Core.cpp.o
+	${COMPILEPATH}/PARAPROBE_Profiling.cpp.o
+	${COMPILEPATH}/PARAPROBE_Math.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsContinuum.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsDiscrete.cpp.o
+	${COMPILEPATH}/PARAPROBE_Geometry.cpp.o
+	${COMPILEPATH}/PARAPROBE_UserStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_MPIStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_PeriodicTable.cpp.o
+	${COMPILEPATH}/PARAPROBE_Crystallography.cpp.o
+	${COMPILEPATH}/PARAPROBE_OriMath.cpp.o
+	${COMPILEPATH}/PARAPROBE_CGALInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_Solutes.cpp.o
+	${COMPILEPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
+	${COMPILEPATH}/PARAPROBE_Grains.cpp.o
+	${COMPILEPATH}/PARAPROBE_Precipitates.cpp.o
+	${COMPILEPATH}/PARAPROBE_Histogram2D.cpp.o
+	${COMPILEPATH}/PARAPROBE_TwoPointStats3D.cpp.o
+	${COMPILEPATH}/PARAPROBE_ROIs.cpp.o
+	${COMPILEPATH}/PARAPROBE_VoxelTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_AABBTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_KDTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_IonCloudMemory.cpp.o
+	${COMPILEPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
 
 	${MYTOOLSRCPATH}/PARAPROBE_ConfigSpatstat.cpp
 	${MYTOOLSRCPATH}/PARAPROBE_SpatstatStructs.cpp
diff --git a/code/paraprobe-surfacer/CMakeLists.txt b/code/paraprobe-surfacer/CMakeLists.txt
index 84c37f6..9217c1a 100755
--- a/code/paraprobe-surfacer/CMakeLists.txt
+++ b/code/paraprobe-surfacer/CMakeLists.txt
@@ -1,38 +1,17 @@
 cmake_minimum_required(VERSION 3.18.4)
 
-################################################################################################################################
-##DEVELOPER SECTION#############################################################################################################
-##in this section software developers need to make changes when debugging#######################################################
-################################################################################################################################
-#please name your project accordingly
 set(MYPROJECTNAME "paraprobe_surfacer")
 message([STATUS] "Projectname is ${MYPROJECTNAME}")
-project(${MYPROJECTNAME} LANGUAGES CXX)
+project(${MYPROJECTNAME} LANGUAGES C CXX)
 set(CMAKE_BUILD_DIR "build")
 
-#pull general information about external libraries and paths related to paraprobe
-include("../PARAPROBE.Dependencies.cmake")
-message([STATUS] "MYPROJECTPATH: ${MYPROJECTPATH}")
-message([STATUS] "MYUTILSPATH: ${MYUTILSPATH}")
-message([STATUS] "MYHDF5PATH: ${MYHDFPATH}")
-message([STATUS] "MYBOOSTPATH: ${MYBOOSTPATH}")
-message([STATUS] "MYCGALPATH: ${MYCGALPATH}")
-message([STATUS] "MYEIGENPATH: ${MYEIGENPATH}")
-message([STATUS] "MYVOROXXPATH: ${MYVOROXXPATH}")
-
-#compose a tool-specific path
-set(MYTOOLPATH "${MYPROJECTPATH}/code/paraprobe-surfacer/")
-message([STATUS] "MYTOOLPATH: ${MYTOOLPATH}")
-
 set(EMPLOY_GNUCOMPILER ON)
+message([STATUS] "CONDA_PATH: ${CONDA_PREFIX}")
 message([STATUS] "MYCCC_COMPILER: __${CMAKE_C_COMPILER}__")
 message([STATUS] "MYCXX_COMPILER: __${CMAKE_CXX_COMPILER}__")
 
-#define which parallelization layers are used
 set(EMPLOY_PARALLELISM_CUDA OFF)
 
-#choose optimization level
-##-O0 nothing, debug purposes, -O1 moderate optimization, -O2 -O3 for production level up to aggressive architecture specific non-portable optimization
 if(EMPLOY_GNUCOMPILER)
 	set(MYOPTLEVEL "-O2")
 	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MYOPTLEVEL}")
@@ -40,53 +19,33 @@ if(EMPLOY_GNUCOMPILER)
 	message([STATUS] "We utilize optimization level ${MYOPTLEVEL}")
 endif()
 
-################################################################################################################################
-##END OF INTERACTION FOR NON PRO USERS##########################################################################################
-##here advanced users might want/need to make modifications if they use non default places for thirdparty libraries#############
-################################################################################################################################
-#HDF5 local installation for advanced I/O, collecting metadata and bundle analysis results together
-include_directories("${MYHDFPATH}/include")
-link_directories("${MYHDFPATH}/lib")
-set(MYHDFLINKFLAGS "-L${MYHDFPATH}/lib/ ${MYHDFPATH}/lib/libhdf5_hl.a ${MYHDFPATH}/lib/libhdf5.a ${MYHDFPATH}/lib/libz.a ${MYHDFPATH}/lib/libszaec.a ${MYHDFPATH}/lib/libaec.a -ldl")
-
-set(BOOST_ROOT "${MYBOOSTPATH}")
-set(Boost_NO_SYSTEM_PATHS ON)
-#set(Boost_INCLUDE_DIR "${MYBOOSTPATH}")
-#include_directories("${MYCGALPATH}")
-set(CGAL_DIR "${MYCGALPATH}")
-include_directories("${MYEIGENPATH}")
-include_directories("${MYVOROXXPATH}/src")
-
-#GMP and MPFR is included and found alongside the CGAL library
-#connect with ExternalLibraries.cmake via MYCGALHOME and MYEIGENHOME
-option(CGAL_HAS_THREADS "Use thread-safe parts of CGAL instead of assuming non thread-safe code" ON)
-find_package(CGAL QUIET)
-if( CGAL_FOUND )
-	include( ${CGAL_USE_FILE} )
-	if (EMPLOY_MYEIGEN)
-		find_package(Eigen3 3.1.0 REQUIRED) #(3.1.0 or greater)
-		include(CGAL_Eigen3_support)
-		if(NOT TARGET CGAL::Eigen3_support)
-			message(STATUS "This project requires the Eigen library, and will not be compiled.")
-			return()
-		endif()
-	endif()
-endif()
+include_directories("${CONDA_PREFIX}/include/voro++")
+
+find_package(HDF5 REQUIRED)
+include_directories(${HDF5_INCLUDE_DIRS})
+set(MYHDFLINKFLAGS "-L${CONDA_PREFIX}/lib/ ${CONDA_PREFIX}/lib/libhdf5_hl.so ${CONDA_PREFIX}/lib/libhdf5.so ${CONDA_PREFIX}/lib/libz.so.1 ${CONDA_PREFIX}/lib/libsz.so ${CONDA_PREFIX}/lib/libaec.so -ldl")
+
+find_package(Boost REQUIRED)
+include_directories(${Boost_INCLUDE_DIRS})
+
+find_package(CGAL REQUIRED)
+include                     (${CGAL_USE_FILE})
+include_directories         (${CGAL_INCLUDE_DIRS})
+
+find_package(Eigen3 3.3 REQUIRED)
+#include_directories         (${EIGEN3_INCLUDE_DIRS})
+include_directories("${CONDA_PREFIX}/include/eigen3")
 
-#connect with ExternalLibraries.cmake via MYBOOSTHOME
-#include_directories(${Boost_INCLUDE_DIR})
-link_directories(${Boost_LIBRARY_DIR})
-find_package(Boost)
+find_package(MPI REQUIRED)
+include_directories(${MPI_INCLUDE_PATH})
 
 find_package(OpenSSL REQUIRED)
 set(MYSSLLINKFLAGS "-lssl -lcrypto")
 
 #setting up compiler-specifics
 if(EMPLOY_GNUCOMPILER)
-	# set(MYVERBOSE "-fopt-info") # optimization details only
-	set(MYVERBOSE "-Wall") # all warnings
-	add_definitions("${MYOPTLEVEL}")
-	add_definitions("${MYVERBOSE}")
+	set(MYVERBOSE "-fopt-info-all=opt.all")
+	add_definitions("${MYOPTLEVEL} ${MYVERBOSE}")
 	set(MYOMP "-fopenmp -lpthread")
 	add_definitions(${MYOMP})
 	add_definitions("-std=c++17")
@@ -101,43 +60,45 @@ if(EMPLOY_PARALLELISM_MPI)
 endif()
 
 #specific paths of dependencies for this tool
-set(MYTOOLSRCPATH "${MYTOOLPATH}/src/cxx")
+set(MYTOOLSRCPATH "src/cxx")
+set(MYVOROSRCPATH "../../../voro++/src")
+set(COMPILEPATH "../compiled_code")
 
 #list firstly the precompiled shared aka utils, secondly the tool-specific components, lastly the tool-specific main
 add_executable(${MYPROJECTNAME}
-	${MYUTILSPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OpenSSLInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CiteMe.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ConfigShared.cpp.o
-	${MYUTILSPATH}/PARAPROBE_FilePathHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_BitMangling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_HDF5Core.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Profiling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Math.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsContinuum.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsDiscrete.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Geometry.cpp.o
-	${MYUTILSPATH}/PARAPROBE_UserStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_MPIStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PeriodicTable.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Crystallography.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OriMath.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CGALInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Solutes.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Grains.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Precipitates.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Histogram2D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TwoPointStats3D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ROIs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_VoxelTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_AABBTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_KDTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_IonCloudMemory.cpp.o
-	${MYUTILSPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
+	${COMPILEPATH}/PARAPROBE_OpenSSLInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_CiteMe.cpp.o
+	${COMPILEPATH}/PARAPROBE_ConfigShared.cpp.o
+	${COMPILEPATH}/PARAPROBE_FilePathHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_BitMangling.cpp.o
+	${COMPILEPATH}/PARAPROBE_HDF5Core.cpp.o
+	${COMPILEPATH}/PARAPROBE_Profiling.cpp.o
+	${COMPILEPATH}/PARAPROBE_Math.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsContinuum.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsDiscrete.cpp.o
+	${COMPILEPATH}/PARAPROBE_Geometry.cpp.o
+	${COMPILEPATH}/PARAPROBE_UserStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_MPIStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_PeriodicTable.cpp.o
+	${COMPILEPATH}/PARAPROBE_Crystallography.cpp.o
+	${COMPILEPATH}/PARAPROBE_OriMath.cpp.o
+	${COMPILEPATH}/PARAPROBE_CGALInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_Solutes.cpp.o
+	${COMPILEPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
+	${COMPILEPATH}/PARAPROBE_Grains.cpp.o
+	${COMPILEPATH}/PARAPROBE_Precipitates.cpp.o
+	${COMPILEPATH}/PARAPROBE_Histogram2D.cpp.o
+	${COMPILEPATH}/PARAPROBE_TwoPointStats3D.cpp.o
+	${COMPILEPATH}/PARAPROBE_ROIs.cpp.o
+	${COMPILEPATH}/PARAPROBE_VoxelTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_AABBTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_KDTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_IonCloudMemory.cpp.o
+	${COMPILEPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
 
 	${MYTOOLSRCPATH}/PARAPROBE_ConfigSurfacer.cpp
 	${MYTOOLSRCPATH}/PARAPROBE_SurfacerStructs.cpp
diff --git a/code/paraprobe-tessellator/CMakeLists.txt b/code/paraprobe-tessellator/CMakeLists.txt
index bf0147d..4e3c607 100755
--- a/code/paraprobe-tessellator/CMakeLists.txt
+++ b/code/paraprobe-tessellator/CMakeLists.txt
@@ -1,34 +1,18 @@
 cmake_minimum_required(VERSION 3.18.4)
 
-################################################################################################################################
-##DEVELOPER SECTION#############################################################################################################
-##in this section software developers need to make changes when debugging#######################################################
-################################################################################################################################
-#please name your project accordingly
 set(MYPROJECTNAME "paraprobe_tessellator")
 message([STATUS] "Projectname is ${MYPROJECTNAME}")
-project(${MYPROJECTNAME} LANGUAGES CXX)
+project(${MYPROJECTNAME} LANGUAGES C CXX)
 set(CMAKE_BUILD_DIR "build")
 
-#pull general information about external libraries and paths related to paraprobe
-include("../PARAPROBE.Dependencies.cmake")
-message([STATUS] "MYPROJECTPATH: ${MYPROJECTPATH}")
-message([STATUS] "MYUTILSPATH: ${MYUTILSPATH}")
-message([STATUS] "MYHDF5PATH: ${MYHDFPATH}")
-message([STATUS] "MYVOROXXPATH: ${MYVOROXXPATH}")
-
-#compose a tool-specific path
-set(MYTOOLPATH "${MYPROJECTPATH}/code/paraprobe-tessellator/")
-message([STATUS] "MYTOOLPATH: ${MYTOOLPATH}")
 set(EMPLOY_GNUCOMPILER ON)
+message([STATUS] "CONDA_PATH: ${CONDA_PREFIX}")
 message([STATUS] "MYCCC_COMPILER: __${CMAKE_C_COMPILER}__")
 message([STATUS] "MYCXX_COMPILER: __${CMAKE_CXX_COMPILER}__")
 
 #define which parallelization layers are used
 set(EMPLOY_PARALLELISM_CUDA OFF)
 
-#choose optimization level
-##-O0 nothing, debug purposes, -O1 moderate optimization, -O2 -O3 for production level up to aggressive architecture specific non-portable optimization
 if(EMPLOY_GNUCOMPILER)
 	set(MYOPTLEVEL "-O2")
 	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MYOPTLEVEL}")
@@ -36,117 +20,92 @@ if(EMPLOY_GNUCOMPILER)
 	message([STATUS] "We utilize optimization level ${MYOPTLEVEL}")
 endif()
 
-################################################################################################################################
-##END OF INTERACTION FOR NON PRO USERS##########################################################################################
-##here advanced users might want/need to make modifications if they use non default places for thirdparty libraries#############
-################################################################################################################################
-#HDF5 local installation for advanced I/O, collecting metadata and bundle analysis results together
-include_directories("${MYHDFPATH}/include")
-link_directories("${MYHDFPATH}/lib")
-set(MYHDFLINKFLAGS "-L${MYHDFPATH}/lib/ ${MYHDFPATH}/lib/libhdf5_hl.a ${MYHDFPATH}/lib/libhdf5.a ${MYHDFPATH}/lib/libz.a ${MYHDFPATH}/lib/libszaec.a ${MYHDFPATH}/lib/libaec.a -ldl")
-
-set(BOOST_ROOT "${MYBOOSTPATH}")
-set(Boost_NO_SYSTEM_PATHS ON)
-#set(Boost_INCLUDE_DIR "${MYBOOSTPATH}")
-#include_directories("${MYCGALPATH}")
-set(CGAL_DIR "${MYCGALPATH}")
-include_directories("${MYEIGENPATH}")
-include_directories("${MYVOROXXPATH}/src")
-
-#GMP and MPFR is included and found alongside the CGAL library
-#connect with ExternalLibraries.cmake via MYCGALHOME and MYEIGENHOME
-find_package(CGAL QUIET)
-if( CGAL_FOUND )
-	include( ${CGAL_USE_FILE} )
-	if (EMPLOY_MYEIGEN)
-		find_package(Eigen3 3.1.0 REQUIRED) #(3.1.0 or greater)
-		include(CGAL_Eigen3_support)
-		if(NOT TARGET CGAL::Eigen3_support)
-			message(STATUS "This project requires the Eigen library, and will not be compiled.")
-			return()
-		endif()
-	endif()
-endif()
+include_directories("${CONDA_PREFIX}/include/voro++")
+
+find_package(HDF5 REQUIRED)
+include_directories(${HDF5_INCLUDE_DIRS})
+set(MYHDFLINKFLAGS "-L${CONDA_PREFIX}/lib/ ${CONDA_PREFIX}/lib/libhdf5_hl.so ${CONDA_PREFIX}/lib/libhdf5.so ${CONDA_PREFIX}/lib/libz.so.1 ${CONDA_PREFIX}/lib/libsz.so ${CONDA_PREFIX}/lib/libaec.so -ldl")
+
+find_package(Boost REQUIRED)
+include_directories(${Boost_INCLUDE_DIRS})
 
-#connect with ExternalLibraries.cmake via MYBOOSTHOME
-#include_directories(${Boost_INCLUDE_DIR})
-link_directories(${Boost_LIBRARY_DIR})
-find_package(Boost)
+find_package(CGAL REQUIRED)
+include                     (${CGAL_USE_FILE})
+include_directories         (${CGAL_INCLUDE_DIRS})
+
+find_package(Eigen3 3.3 REQUIRED)
+#include_directories         (${EIGEN3_INCLUDE_DIRS})
+include_directories("${CONDA_PREFIX}/include/eigen3")
+
+find_package(MPI REQUIRED)
+include_directories(${MPI_INCLUDE_PATH})
 
 find_package(OpenSSL REQUIRED)
 set(MYSSLLINKFLAGS "-lssl -lcrypto")
 
 #setting up compiler-specifics
 if(EMPLOY_GNUCOMPILER)
-	#add_definitions("-std=c++1z")
-	set(MYVERBOSE "-Wall") # all warnings
-	add_definitions("${MYOPTLEVEL}")
-	add_definitions("${MYVERBOSE}")
+	set(MYVERBOSE "-fopt-info-all=opt.all")
+	add_definitions("${MYOPTLEVEL} ${MYVERBOSE}")
 	set(MYOMP "-fopenmp -lpthread")
 	add_definitions(${MYOMP})
 	add_definitions("-std=c++17")
 endif()
 
-#parallelization - MPI process-level
-#query location of MPI library
-message([STATUS] "MPI_INCLUDE_PATH ${MPI_INCLUDE_PATH}")
-if(EMPLOY_PARALLELISM_MPI)
-	find_package(MPI REQUIRED)
-	include_directories(${MPI_INCLUDE_PATH})
-endif()
-
 #specific paths of dependencies for this tool
-set(MYTOOLSRCPATH "${MYTOOLPATH}/src/cxx")
+set(MYTOOLSRCPATH "src/cxx")
+set(MYVOROSRCPATH "../../../voro++/src")
+set(COMPILEPATH "../compiled_code")
 
 #list firstly the precompiled shared aka utils, secondly the tool-specific components, lastly the tool-specific main
 add_executable(${MYPROJECTNAME}
-	${MYUTILSPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OpenSSLInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CiteMe.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ConfigShared.cpp.o
-	${MYUTILSPATH}/PARAPROBE_FilePathHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_BitMangling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_HDF5Core.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Profiling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Math.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsContinuum.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsDiscrete.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Geometry.cpp.o
-	${MYUTILSPATH}/PARAPROBE_UserStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_MPIStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PeriodicTable.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Crystallography.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OriMath.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CGALInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Solutes.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Grains.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Precipitates.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Histogram2D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TwoPointStats3D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ROIs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_VoxelTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_AABBTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_KDTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_IonCloudMemory.cpp.o
-	${MYUTILSPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
-
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/c_loops.cc.o
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/cell.cc.o
-#	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/cmd_line.cc
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/common.cc.o
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/container.cc.o
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/container_prd.cc.o
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/pre_container.cc.o
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/unitcell.cc.o
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/v_base.cc.o
-#	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/v_base_wl.cc
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/v_compute.cc.o
-#	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/voro++.cc
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/wall.cc.o
+	${COMPILEPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
+	${COMPILEPATH}/PARAPROBE_OpenSSLInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_CiteMe.cpp.o
+	${COMPILEPATH}/PARAPROBE_ConfigShared.cpp.o
+	${COMPILEPATH}/PARAPROBE_FilePathHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_BitMangling.cpp.o
+	${COMPILEPATH}/PARAPROBE_HDF5Core.cpp.o
+	${COMPILEPATH}/PARAPROBE_Profiling.cpp.o
+	${COMPILEPATH}/PARAPROBE_Math.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsContinuum.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsDiscrete.cpp.o
+	${COMPILEPATH}/PARAPROBE_Geometry.cpp.o
+	${COMPILEPATH}/PARAPROBE_UserStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_MPIStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_PeriodicTable.cpp.o
+	${COMPILEPATH}/PARAPROBE_Crystallography.cpp.o
+	${COMPILEPATH}/PARAPROBE_OriMath.cpp.o
+	${COMPILEPATH}/PARAPROBE_CGALInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_Solutes.cpp.o
+	${COMPILEPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
+	${COMPILEPATH}/PARAPROBE_Grains.cpp.o
+	${COMPILEPATH}/PARAPROBE_Precipitates.cpp.o
+	${COMPILEPATH}/PARAPROBE_Histogram2D.cpp.o
+	${COMPILEPATH}/PARAPROBE_TwoPointStats3D.cpp.o
+	${COMPILEPATH}/PARAPROBE_ROIs.cpp.o
+	${COMPILEPATH}/PARAPROBE_VoxelTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_AABBTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_KDTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_IonCloudMemory.cpp.o
+	${COMPILEPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
+
+	${MYVOROSRCPATH}/c_loops.cc.o
+	${MYVOROSRCPATH}/cell.cc.o
+#	${COMPILEPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/cmd_line.cc
+	${MYVOROSRCPATH}/common.cc.o
+	${MYVOROSRCPATH}/container.cc.o
+	${MYVOROSRCPATH}/container_prd.cc.o
+	${MYVOROSRCPATH}/pre_container.cc.o
+	${MYVOROSRCPATH}/unitcell.cc.o
+	${MYVOROSRCPATH}/v_base.cc.o
+#	${COMPILEPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/v_base_wl.cc
+	${MYVOROSRCPATH}/v_compute.cc.o
+#	${COMPILEPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/voro++.cc
+	${MYVOROSRCPATH}/wall.cc.o
 
 	${MYTOOLSRCPATH}/PARAPROBE_ConfigTessellator.cpp
 	${MYTOOLSRCPATH}/PARAPROBE_TessellatorStructs.cpp
diff --git a/code/paraprobe-utils/CMakeLists.txt b/code/paraprobe-utils/CMakeLists.txt
index 0cfdd7d..69df46c 100755
--- a/code/paraprobe-utils/CMakeLists.txt
+++ b/code/paraprobe-utils/CMakeLists.txt
@@ -1,36 +1,18 @@
 cmake_minimum_required(VERSION 3.18.4)
 
-################################################################################################################################
-##DEVELOPER SECTION#############################################################################################################
-##in this section software developers need to make changes when debugging#######################################################
-################################################################################################################################ 
-
 #please name your project accordingly
 set(MYPROJECTNAME "paraprobe_utils")
 message([STATUS] "Projectname is ${MYPROJECTNAME}")
 project(${MYPROJECTNAME} LANGUAGES CXX)
 set(CMAKE_BUILD_DIR "build")
 
-#pull general information about external libraries and paths related to paraprobe
-include("../PARAPROBE.Dependencies.cmake")
-message([STATUS] "MYPROJECTPATH: ${MYPROJECTPATH}")
-message([STATUS] "MYUTILSPATH: ${MYUTILSPATH}")
-message([STATUS] "MYHDF5PATH: ${MYHDFPATH}")
-message([STATUS] "MYBOOSTPATH: ${MYBOOSTPATH}")
-message([STATUS] "MYCGALPATH: ${MYCGALPATH}")
-message([STATUS] "MYEIGENPATH: ${MYEIGENPATH}")
-message([STATUS] "MYVOROXXPATH: ${MYVOROXXPATH}")
-
-
 set(EMPLOY_GNUCOMPILER ON)
+message([STATUS] "CONDA_PATH: ${CONDA_PREFIX}")
 message([STATUS] "MYCCC_COMPILER: __${CMAKE_C_COMPILER}__")
 message([STATUS] "MYCXX_COMPILER: __${CMAKE_CXX_COMPILER}__")
 
-#define which parallelization layers are used
 set(EMPLOY_PARALLELISM_CUDA OFF)
 
-#choose optimization level
-##-O0 nothing, debug purposes, -O1 moderate optimization, -O2 -O3 for production level up to aggressive architecture specific non-portable optimization
 if(EMPLOY_GNUCOMPILER)
 	set(MYOPTLEVEL "-O2")
 	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MYOPTLEVEL}")
@@ -38,58 +20,29 @@ if(EMPLOY_GNUCOMPILER)
 	message([STATUS] "We utilize optimization level ${MYOPTLEVEL}")
 endif()
 
-################################################################################################################################
-##END OF INTERACTION FOR NON PRO USERS##########################################################################################
-##here advanced users might want/need to make modifications if they use non default places for thirdparty libraries#############
-################################################################################################################################
-#HDF5 local installation for advanced I/O, collecting metadata and bundle analysis results together
-include_directories("${MYHDFPATH}/include")
-link_directories("${MYHDFPATH}/lib")
-set(MYHDFLINKFLAGS "-L${MYHDFPATH}/lib/ ${MYHDFPATH}/lib/libhdf5_hl.a ${MYHDFPATH}/lib/libhdf5.a ${MYHDFPATH}/lib/libz.a ${MYHDFPATH}/lib/libsz.a ${MYHDFPATH}/lib/libaec.a -ldl")
-
-set(BOOST_ROOT "${MYBOOSTPATH}")
-set(Boost_NO_SYSTEM_PATHS ON)
-#set(Boost_INCLUDE_DIR "${MYBOOSTPATH}")
-#include_directories("${MYCGALPATH}")
-set(CGAL_DIR "${MYCGALPATH}")
-set(EIGEN3_INCLUDE_DIR "${MYEIGENPATH}")
-include_directories("${MYEIGENPATH}")
-include_directories("${MYVOROXXPATH}/src")
-
-#GMP and MPFR is included and found alongside the CGAL library
-#connect with ExternalLibraries.cmake via MYCGALHOME
-find_package(CGAL QUIET)
-if( CGAL_FOUND )
-	include( ${CGAL_USE_FILE} )
-	find_package(Eigen3)  #  3.1.0 REQUIRED) #(3.1.0 or greater)
-	include(CGAL_Eigen3_support)
-	if(NOT TARGET CGAL::Eigen3_support)
-		message(STATUS "This project requires the Eigen library, and will not be compiled.")
-		return()
-	endif()
-else()
-	message([FATAL_ERROR] "CGAL is required, employ it!")
-endif()
-
-#connect with ExternalLibraries.cmake via MYBOOSTHOME
-#include_directories(${Boost_INCLUDE_DIR})
-#include_directories(${MYBOOSTPATH})
+find_package(HDF5 REQUIRED)
+include_directories(${HDF5_INCLUDE_DIRS})
+set(MYHDFLINKFLAGS "-L${CONDA_PREFIX}/lib/ ${CONDA_PREFIX}/lib/libhdf5_hl.so ${CONDA_PREFIX}/lib/libhdf5.so ${CONDA_PREFIX}/lib/libz.so.1 ${CONDA_PREFIX}/lib/libsz.so ${CONDA_PREFIX}/lib/libaec.so -ldl")
 
-link_directories(${Boost_LIBRARY_DIR})
 find_package(Boost REQUIRED)
+include_directories(${Boost_INCLUDE_DIRS})
 
+find_package(CGAL REQUIRED)
+include                     (${CGAL_USE_FILE})
+include_directories         (${CGAL_INCLUDE_DIRS})
 
-find_package(OpenSSL REQUIRED)
-
+find_package(Eigen3 3.3 REQUIRED)
+#include_directories         (${EIGEN3_INCLUDE_DIRS})
+include_directories("${CONDA_PREFIX}/include/eigen3")
 
-include_directories("${MYVOROXXPATH}/src")
+find_package(MPI REQUIRED)
+include_directories(${MPI_INCLUDE_PATH})
 
-#automatically assign project name and compiler flags
+find_package(OpenSSL REQUIRED)
+set(MYSSLLINKFLAGS "-lssl -lcrypto")
 
-#setting up compiler-specifics
 if(EMPLOY_GNUCOMPILER)
-	# set(MYVERBOSE "-fopt-info") # optimization details only
-	set(MYVERBOSE "-Wall") # all warnings
+	set(MYVERBOSE "-fopt-info-all=opt.all")
 	add_definitions("${MYOPTLEVEL}")
 	add_definitions("${MYVERBOSE}")
 	set(MYOMP "-fopenmp -lpthread")
@@ -97,17 +50,8 @@ if(EMPLOY_GNUCOMPILER)
 	add_definitions("-std=c++17")
 endif()
 
-#parallelization - MPI process-level
-#query location of MPI library
-message([STATUS] "MPI_INCLUDE_PATH ${MPI_INCLUDE_PATH}")
-if(EMPLOY_PARALLELISM_MPI)
-	find_package(MPI REQUIRED)
-	include_directories(${MPI_INCLUDE_PATH})
-endif()
-
-#specific paths of dependencies for this tool
-set(MYTOOLSRCPATH "${MYPROJECTPATH}/code/paraprobe-utils/src/cxx")
-set(MYVOROSRCPATH "${MYVOROXXPATH}/src")
+set(MYTOOLSRCPATH "src/cxx")
+set(MYVOROSRCPATH "../../../voro++/src")
 
 add_library(paraprobe-utils OBJECT
 	${MYTOOLSRCPATH}/PARAPROBE_ArgsAndGitSha.cpp
