diff --git a/PARAPROBE.Step02.CondaWithJupyterLab.sh b/PARAPROBE.Step02.CondaWithJupyterLab.sh
index f5028e4..3387db2 100644
--- a/PARAPROBE.Step02.CondaWithJupyterLab.sh
+++ b/PARAPROBE.Step02.CondaWithJupyterLab.sh
@@ -1,34 +1,25 @@
 # #!/bin/bash
 
-# DEFAULT/MANDATORY/CPU-PARALLEISM-ONLY INSTALLATION ROUTE to install and use every tool of the toolbox
-# make sure to have conda activate i.e. execute within the conda base environment
-conda create -n paraprobe-py3.8 -c conda-forge python=3.8 jupyterlab-h5web jupyterlab hdbscan gitpython nodejs ase radioactivedecay pandas sphinx
-
-# activate/i.e. use this environment
-conda activate paraprobe-py3.8
-
-# make a few more installations in this specific environment
+# MANDATORY to install and use every tool of the toolbox
+conda create -n paraprobe -c conda-forge python=3.9
+conda install -n paraprobe -c conda-forge jupyterlab-h5web
+conda install -n paraprobe -c conda-forge jupyterlab
+conda install -n paraprobe -c conda-forge ecdf
+conda install -n paraprobe -c conda-forge hdbscan
+conda install -n paraprobe -c conda-forge gitpython
+conda install -n paraprobe -c conda-forge nodejs
+conda install -n paraprobe -c conda-forge ase
+conda install -n paraprobe -c conda-forge radioactivedecay
+conda install -n paraprobe -c conda-forge pandas
+conda install -n paraprobe -c conda-forge sphinx
+conda activate paraprobe
 python3 -m pip install --upgrade pip
-python3 -m pip install ecdf pytictoc ifes-apt-tc-data-modeling python-docs-theme
-
-
-# ALTERNATIVE/OPTIONAL/CPU-AND-GPU-PARALLELISM INSTALLATION ROUTE
-# USING THIS INSTALLATION ROUTE MAKES SENSE ONLY if you would like to use paraprobe-clusterer AND here its interface to NVidia's RAPIDSAI package
-# USING THIS INSTALLATION ROUTE MAKES SENSE ONLY when you have an NVidia GPU. ONLY IN THIS CASE, you should follow this alternative installation route!
-# make sure to have conda activate i.e. execute within the conda base environment
-# DEPENDING ON YOUR SPECIFIC GPU and DRIVERS installed this installation line has to be modified!
-# conda create -n rapids-23.02-py3.8-cu11.8 -c rapidsai -c conda-forge -c nvidia rapids=23.02 python=3.8 cudatoolkit=11.8 jupyterlab-h5web jupyterlab hdbscan gitpython nodejs ase radioactivedecay pandas sphinx
-
-# conda install -c rapidsai -c conda-forge -c nvidia rapids=22.12 python=3.9 cudatoolkit=11.7
-
-# activate/i.e. use this environment
-# conda activate rapids-23.02-py3.8-cu11.8
-
-# make a few more installations in this specific environment
-# python3 -m pip install --upgrade pip
-# python3 -m pip install ecdf pytictoc ifes-apt-tc-data-modeling python-docs-theme
+python3 -m pip install ecdf ifes-apt-tc-data-modeling
+python3 -m pip install python-docs-theme
 
-# YOUR ENVIRONMENT IS READY
+# OPTIONAL to install ONLY if you would like to use paraprobe-clusterer AND here its interface to NVidia's RAPIDSAI package
+# THIS MAKES SENSE ONLY when you have an NVidia GPU. ONLY IN THIS CASE, you should additionally install
+conda install -c rapidsai -c conda-forge -c nvidia rapids=22.12 python=3.9 cudatoolkit=11.7
 
 # SOME HINTS to solve some issues which you may encounter or not
 # if collapsible headings are not working install it via the extension panel, rebuild and restart the kernel
@@ -40,11 +31,10 @@ python3 -m pip install ecdf pytictoc ifes-apt-tc-data-modeling python-docs-theme
 # WHAT YOU NEED TO DO WHEN YOU START INTERACTING WITH PARAPROBE VIA JUPYTER-LAB
 # open the console go into the paraprobe-toolbox directory and activate the paraprobe conda environment
 # eventually you may need to deactivate existent conda environments first
-conda activate paraprobe-py3.8
-# or
-# conda activate rapids-23.02-py3.8-cu11.8
+conda activate paraprobe
 
-# now (paraprobe) should be shown in front of your console input line indicating you the desired conda environment was activated correctly
+# now (paraprobe) should be shown in front of your console input line indicating you the desired conda environment
+# was activated correctly
 
 # test if jupyter-lab works successfully, this is also how you can start the service
 jupyter-lab --NotebookApp.token=''
@@ -53,7 +43,7 @@ jupyter-lab --NotebookApp.token=''
 # jupyter server was started. You can then click the link (e.g. with holding Ctrl and clicking the link)
 # this will redirect you to the browser and spin up the jupyter-lab for you then
 
-# IF YOU ARE DONE and would like to do something else in say another environment
+# if you are done with your session and would like to do something else in say another environment
 # consider to deactivate the paraprobe environment
 conda deactivate
 # in this way you will again be in the base environment
diff --git a/PARAPROBE.Step04.SetParaprobeRootDirectory.sh b/PARAPROBE.Step04.SetParaprobeRootDirectory.sh
index d441dd7..ce6e9a1 100644
--- a/PARAPROBE.Step04.SetParaprobeRootDirectory.sh
+++ b/PARAPROBE.Step04.SetParaprobeRootDirectory.sh
@@ -1,3 +1,3 @@
 #!/bin/bash
 
-sed -i 's|set(MYPROJECTPATH "<<YOURPATH>>/paraprobe-toolbox")|set(MYPROJECTPATH \"'"$PWD"'\/\")|g' code/PARAPROBE.Dependencies.cmake
+sed -i 's|set(MYPROJECTPATH "<<YOURPATH>>")|set(MYPROJECTPATH \"'"$PWD"'\/\")|g' code/PARAPROBE.Dependencies.cmake
\ No newline at end of file
diff --git a/README.md b/README.md
index 93d017b..c4841cb 100644
--- a/README.md
+++ b/README.md
@@ -1,19 +1,32 @@
 # paraprobe-toolbox
 
-The paraprobe-toolbox is a collection of open-source tools for efficient analyses of point cloud data where each point can
-represent atoms or molecular ions. A key application of the toolbox has been for research in the field of Atom Probe Tomography
-(APT) and related Field Ion Microscopy (FIM). The toolbox does not replace but complements existent software tools in this
-research field. Given its capabilities of handling points as objects with properties and enabling analyses of the spatial
-arrangement of and intersections between geometric primitives, the software can equally be used for analyzing data in
-materials science and engineering. A documentation of the tools is available https://paraprobe-toolbox.readthedocs.io/en/latest/
+## Purpose:
+Strong-scaling shared-memory CPU-parallelized tools for mining atom probe tomography data and
+related datasets with three-dimensional point cloud and molecular ion, ion, or atom mark data.
 
 ## Version history:
-
-**v0.4**
-Bug fixes, a new HDF5 wrapper supporting compression, NeXus data schemas for all input and output files.  
+The paraprobe-toolbox project evolved from an initiative by M. Kühbach with A. Breen, B. Gault,
+and D. Raabe at the Max-Planck-Institut für Eisenforschung GmbH. The project aims at building
+open-source software that can take advantage of modern HPC resources and cross-disciplinary
+specialists' software tools. The toolbox currently focuses on applications within the research
+field of atom probe microscopy and related materials science disciplines. The aim is to support
+scientists with tools which are open-source, more efficient, stronger automated, and rigorous
+designed to support scientists with organizing and managing their analyses according to the 
+FAIR (findable, accessible, interoperable, reproducible) data stewardship principles.
+
+Our aim is to offer an open-source approach to processing of point cloud data that can complement 
+proprietary software. Since its start, the code has seen a few rounds of strong refactoring and
+evolution. Now we are at a point where the software is worth to be properly maintained and developed
+further so that users can make contributions such as share analysis templates and Python code,
+and give advice or comments to the C/C++ backend of the tools.
+
+**v0.4 testing version**
+Bug fixes, a new HDF5 wrapper supporting compression, NeXus now on all input and output, paraprobe-selector,  
+and paraprobe-clusterer as new tools. This commit should be considered a beta version of the upcoming v0.4.  
+The tools in this version are currently being tested and consolidated to move completely to conda with v0.4.  
 
 **v0.3.1**
-A version reflecting development for the NOMAD OASIS/FAIRmat project in September 2022.  
+A version reflecting development for the NOMAD OASIS/FAIRmat project in september 2022.  
 
 **v0.3**, the version with tools for delocalization, iso-surface analyses, mesh intersections  
 https://doi.org/10.48550/arXiv.2205.13510  
@@ -38,17 +51,22 @@ https://doi.org/10.1007/978-3-319-48770-0_6
 
 0. Get the code from an archive or its GitLab repository. Go into the paraprobe-toolbox directory. This is the so-called 
    paraprobe-toolbox root directory, i.e. the home of the project. Make the scripts in there executable chmod +x \*.sh
-1. Inspect the steps in PARAPROBE.Step01.OSDependencies.sh which guides you through the installation of the GNU compiler suite,
-   the Message Passing Interface and other required third-party libraries at the operation system level.
+1. Inspect the steps in PARAPROBE.Step01.OSDependencies.sh which guide you how to install the GNU compiler suite, MPI.
    This step will require administrator privileges as compiler, MPI, and some low-level numerical libraries are not part
    of a standard Linux installation (at least as it reads for Ubuntu v18.x, v20.x, and v22.x).
-2. Make sure to have a recent version of conda installed. Using miniconda3 and making a fresh environment is recommended.
+2. Make sure to have a recent version of conda installed. Using miniconda and making a fresh environment is recommended.
    Good manuals on how to install miniconda are available online. The Digital Ocean documentations from Lisa Tagliaferri
-   for instance are one good guide to get you started. Keep in mind that anaconda is not exclusively useful for the
-   paraprobe-toolbox only. Conda is nowadays the preferred way how to do development in Python and isn't this what many
-   of us like to do?
-   Once you have miniconda installed, you should follow the steps in PARAPROBE.Step02.CondaWithJupyterLab.sh. By default,
-   the installation will use a CPU-parallelism-only version of the toolbox.
+   for instance I found a good guide to get you started. Keep in mind that anaconda is not exclusively useful for the paraprobe-toolbox only. Conda is nowadays the preferred way how to do development in Python and isnt this what many
+   of us like?
+   Once you have miniconda installed, you should follow the guide in the the CondaEnvironmentJupyterLab file.
+   I do recommend you to not use the old way of python3 virtualenv environments directly any longer. Mid-term, hopefully
+   as soon as the conda review team has a look at our proposal we will move to conda. Using conda is also preferred now
+   because the Christmas update with paraprobe-clusterer brings an option to take advantage of GPU parallelization
+   (for cluster analyses at least). Activating this requires to have at least a working (NVidia) GPU as we are experimenting
+   with the RapidsAI toolkit. So while walking through step 2 think about if you have and need the GPU and then
+   execute the last step or not respectively.
+   Using the GPU part is optional, all tools have a CPU implementation means the GPU part is not required to use
+   the rest of the toolbox.
 3. Follow the steps in the PARAPROBE.Step03.ThirdPartyDependencies.sh manual.
    This will compile and configure local versions of relevant libraries, like HDF5, CGAL, and others.
 4. Set the path of this local paraprobe version inside the PARAPROBE.Dependencies.cmake text file. Specifically, check that
@@ -76,10 +94,10 @@ https://doi.org/10.1007/978-3-319-48770-0_6
    GitLab space is limited.
 
 ## Examples:
-The paraprobe-toolbox comes with a teaching directory (paraprobe-toolbox/teaching/) which has many examples how to
-use the tools of the toolbox. These examples show different workflows, exemplified as interactively executable jupyter
-notebooks which bring everything together. That is Python/C++ standalone tools/JupyterLab and NeXus/HDF5 for storing
-configurations and numerical data, not just somehow into HDF5 but structured according to data schemas for
+The paraprobe-toolbox comes with a teaching directory (paraprobe-toolbox/teaching/) which contains examples.
+These examples show different workflows with tools of the paraprobe-toolbox, realized as jupyter notebooks
+which bring everything together. That is Python/C++ standalone tools/JupyterLab and NeXus/HDF5 for storing
+configurations and numerical data, not just somehow into HDF5 but structured according to data schemes for
 each task and tool.
 
 ## Questions, comments, suggestions, problems ?
@@ -103,3 +121,17 @@ The toolbox uses third-party tools with an open license for academic purposes.
 ## Supported community file formats:
 The toolbox has readers for POS, EPOS, (AMETEK/Cameca) APT file format, RRNG, and RNG file formats.
 With v0.3.1 the tools support examples for NOMAD OASIS working with NXapm NeXus/HDF5 files.
+
+## Using NeXus/HDF5 data schemes of the FAIRmat project towards better FAIR-compliance and working towards standardization of data exchange in atom probe and beyond:
+The toolbox uses openly documented data schema which specify which numerical data and metadata
+are expected for configuration files and output files. These schema files can be found
+under paraprobe-toolbox/code/data-models. Schema for configuration files are in config.
+Schemes for output/results files are in results. The formatting and ruleset uses the ideas
+of the NeXus/FAIRmat proposal to write NeXus-compliant configuration files.  
+https://fairmat-experimental.github.io/nexus-fairmat-proposal
+Given that updates on all paraprobe-toolbox-specific data schemes, i.e. those
+prefixed with NXapm_paraprobe are made at different points in time, users should consider
+first the code/data-models path. The fairmat-proposal takes the updates in the code
+with some delay as the nexus-fairmat-proposal includes a substantial larger number
+of data schemes for the condensed-matter physics and the wider field of chemical physics
+of solids.
\ No newline at end of file
diff --git a/code/paraprobe-autoreporter/src/python/__init__.py b/code/paraprobe-autoreporter/src/python/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/code/paraprobe-autoreporter/src/python/paraprobe_autoreporter.py b/code/paraprobe-autoreporter/src/python/paraprobe_autoreporter.py
index 5bbab77..bfea020 100644
--- a/code/paraprobe-autoreporter/src/python/paraprobe_autoreporter.py
+++ b/code/paraprobe-autoreporter/src/python/paraprobe_autoreporter.py
@@ -16,11 +16,11 @@
 #
 
 
-from wizard.selector_report import AutoReporterSelector
-from wizard.ranger_report import AutoReporterRanger
-from wizard.surfacer_report import AutoReporterSurfacer
-from wizard.distancer_report import AutoReporterDistancer
-from wizard.tessellator_report import AutoReporterTessellator
-from wizard.spatstat_report import AutoreporterSpatstat
-from wizard.nanochem_report import AutoReporterNanochem
-from wizard.intersector_report import AutoReporterIntersector
+from paraprobe_autoreporter.wizard.selector_report import AutoReporterSelector
+from paraprobe_autoreporter.wizard.ranger_report import AutoReporterRanger
+from paraprobe_autoreporter.wizard.surfacer_report import AutoReporterSurfacer
+from paraprobe_autoreporter.wizard.distancer_report import AutoReporterDistancer
+from paraprobe_autoreporter.wizard.tessellator_report import AutoReporterTessellator
+from paraprobe_autoreporter.wizard.spatstat_report import AutoreporterSpatstat
+from paraprobe_autoreporter.wizard.nanochem_report import AutoReporterNanochem
+from paraprobe_autoreporter.wizard.intersector_report import AutoReporterIntersector
diff --git a/code/paraprobe-autoreporter/src/python/wizard/distancer_report.py b/code/paraprobe-autoreporter/src/python/wizard/distancer_report.py
index f7dd3a5..4e3d4b9 100644
--- a/code/paraprobe-autoreporter/src/python/wizard/distancer_report.py
+++ b/code/paraprobe-autoreporter/src/python/wizard/distancer_report.py
@@ -21,7 +21,7 @@ import numpy as np
 
 import h5py
 
-import wizard.plotting.default.line_plot_property_set_for_fixed_value as mycdf
+import paraprobe_autoreporter.wizard.plotting.default.line_plot_property_set_for_fixed_value as mycdf
 
 
 class AutoReporterDistancer():
diff --git a/code/paraprobe-autoreporter/src/python/wizard/nanochem_report.py b/code/paraprobe-autoreporter/src/python/wizard/nanochem_report.py
index d25e0a8..fc2a407 100644
--- a/code/paraprobe-autoreporter/src/python/wizard/nanochem_report.py
+++ b/code/paraprobe-autoreporter/src/python/wizard/nanochem_report.py
@@ -27,11 +27,11 @@ import pandas as pd
 
 from ase.data import chemical_symbols, atomic_numbers
 
-import wizard.plotting.default.scatter_plot_property_set_over_value_set as mysct
+import paraprobe_autoreporter.wizard.plotting.default.scatter_plot_property_set_over_value_set as mysct
 
-import wizard.plotting.default.line_plot_property_set_for_fixed_value as mycdf
+import paraprobe_autoreporter.wizard.plotting.default.line_plot_property_set_for_fixed_value as mycdf
 
-import wizard.plotting.default.composition_plots as mycmp
+import paraprobe_autoreporter.wizard.plotting.default.composition_plots as mycmp
 
 
 def filtered_mean(df):
diff --git a/code/paraprobe-autoreporter/src/python/wizard/spatstat_report.py b/code/paraprobe-autoreporter/src/python/wizard/spatstat_report.py
index ca0ce42..72051f8 100644
--- a/code/paraprobe-autoreporter/src/python/wizard/spatstat_report.py
+++ b/code/paraprobe-autoreporter/src/python/wizard/spatstat_report.py
@@ -21,9 +21,9 @@ import numpy as np
 
 import h5py
 
-import wizard.plotting.default.line_plot_property_set_for_fixed_value as mycdf
+import paraprobe_autoreporter.wizard.plotting.default.line_plot_property_set_for_fixed_value as mycdf
 
-from wizard.numerics import EPSILON
+from paraprobe_autoreporter.wizard.numerics import EPSILON
 
 
 class AutoReporterSpatstat():
diff --git a/code/paraprobe-autoreporter/src/python/wizard/tessellator_report.py b/code/paraprobe-autoreporter/src/python/wizard/tessellator_report.py
index ccabffe..745f5e4 100644
--- a/code/paraprobe-autoreporter/src/python/wizard/tessellator_report.py
+++ b/code/paraprobe-autoreporter/src/python/wizard/tessellator_report.py
@@ -21,7 +21,7 @@ import numpy as np
 
 import h5py
 
-import wizard.plotting.default.line_plot_property_set_for_fixed_value as mycdf
+import paraprobe_autoreporter.wizard.plotting.default.line_plot_property_set_for_fixed_value as mycdf
 
 
 class AutoReporterTessellator():
diff --git a/code/paraprobe-distancer/CMakeLists.txt b/code/paraprobe-distancer/CMakeLists.txt
index 66982b8..027b3bc 100755
--- a/code/paraprobe-distancer/CMakeLists.txt
+++ b/code/paraprobe-distancer/CMakeLists.txt
@@ -1,34 +1,17 @@
 cmake_minimum_required(VERSION 3.18.4)
 
-################################################################################################################################
-##DEVELOPER SECTION#############################################################################################################
-##in this section software developers need to make changes when debugging#######################################################
-################################################################################################################################
-#please name your project accordingly
 set(MYPROJECTNAME "paraprobe_distancer")
 message([STATUS] "Projectname is ${MYPROJECTNAME}")
-project(${MYPROJECTNAME} LANGUAGES CXX)
+project(${MYPROJECTNAME} LANGUAGES C CXX)
 set(CMAKE_BUILD_DIR "build")
 
-#pull general information about external libraries and paths related to paraprobe
-include("../PARAPROBE.Dependencies.cmake")
-message([STATUS] "MYPROJECTPATH: ${MYPROJECTPATH}")
-message([STATUS] "MYUTILSPATH: ${MYUTILSPATH}")
-message([STATUS] "MYHDF5PATH: ${MYHDFPATH}")
-message([STATUS] "MYVOROXXPATH: ${MYVOROXXPATH}")
-
-#compose a tool-specific path
-set(MYTOOLPATH "${MYPROJECTPATH}/code/paraprobe-distancer/")
-message([STATUS] "MYTOOLPATH: ${MYTOOLPATH}")
 set(EMPLOY_GNUCOMPILER ON)
+message([STATUS] "CONDA_PATH: ${CONDA_PREFIX}")
 message([STATUS] "MYCCC_COMPILER: __${CMAKE_C_COMPILER}__")
 message([STATUS] "MYCXX_COMPILER: __${CMAKE_CXX_COMPILER}__")
 
-#define which parallelization layers are used
 set(EMPLOY_PARALLELISM_CUDA OFF)
 
-#choose optimization level
-##-O0 nothing, debug purposes, -O1 moderate optimization, -O2 -O3 for production level up to aggressive architecture specific non-portable optimization
 if(EMPLOY_GNUCOMPILER)
 	set(MYOPTLEVEL "-O2")
 	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MYOPTLEVEL}")
@@ -36,51 +19,30 @@ if(EMPLOY_GNUCOMPILER)
 	message([STATUS] "We utilize optimization level ${MYOPTLEVEL}")
 endif()
 
-################################################################################################################################
-##END OF INTERACTION FOR NON PRO USERS##########################################################################################
-##here advanced users might want/need to make modifications if they use non default places for thirdparty libraries#############
-################################################################################################################################
-#HDF5 local installation for advanced I/O, collecting metadata and bundle analysis results together
-include_directories("${MYHDFPATH}/include")
-link_directories("${MYHDFPATH}/lib")
-set(MYHDFLINKFLAGS "-L${MYHDFPATH}/lib/ ${MYHDFPATH}/lib/libhdf5_hl.a ${MYHDFPATH}/lib/libhdf5.a ${MYHDFPATH}/lib/libz.a ${MYHDFPATH}/lib/libszaec.a ${MYHDFPATH}/lib/libaec.a -ldl")
-
-set(BOOST_ROOT "${MYBOOSTPATH}")
-set(Boost_NO_SYSTEM_PATHS ON)
-#set(Boost_INCLUDE_DIR "${MYBOOSTPATH}")
-#include_directories("${MYCGALPATH}")
-set(CGAL_DIR "${MYCGALPATH}")
-include_directories("${MYEIGENPATH}")
-include_directories("${MYVOROXXPATH}/src")
-
-#GMP and MPFR is included and found alongside the CGAL library
-#connect with ExternalLibraries.cmake via MYCGALHOME and MYEIGENHOME
-find_package(CGAL QUIET)
-if( CGAL_FOUND )
-	include( ${CGAL_USE_FILE} )
-	if (EMPLOY_MYEIGEN)
-		find_package(Eigen3 3.1.0 REQUIRED) #(3.1.0 or greater)
-		include(CGAL_Eigen3_support)
-		if(NOT TARGET CGAL::Eigen3_support)
-			message(STATUS "This project requires the Eigen library, and will not be compiled.")
-			return()
-		endif()
-	endif()
-endif()
+find_package(HDF5 REQUIRED)
+include_directories(${HDF5_INCLUDE_DIRS})
+set(MYHDFLINKFLAGS "-L${CONDA_PREFIX}/lib/ ${CONDA_PREFIX}/lib/libhdf5_hl.so ${CONDA_PREFIX}/lib/libhdf5.so ${CONDA_PREFIX}/lib/libz.so.1 ${CONDA_PREFIX}/lib/libsz.so ${CONDA_PREFIX}/lib/libaec.so -ldl")
+
+find_package(Boost REQUIRED)
+include_directories(${Boost_INCLUDE_DIRS})
+
+find_package(CGAL REQUIRED)
+include                     (${CGAL_USE_FILE})
+include_directories         (${CGAL_INCLUDE_DIRS})
 
-#connect with ExternalLibraries.cmake via MYBOOSTHOME
-#include_directories(${Boost_INCLUDE_DIR})
-link_directories(${Boost_LIBRARY_DIR})
-find_package(Boost)
+find_package(Eigen3 3.3 REQUIRED)
+#include_directories         (${EIGEN3_INCLUDE_DIRS})
+include_directories("${CONDA_PREFIX}/include/eigen3")
+
+find_package(MPI REQUIRED)
+include_directories(${MPI_INCLUDE_PATH})
 
 find_package(OpenSSL REQUIRED)
 set(MYSSLLINKFLAGS "-lssl -lcrypto")
 
 #setting up compiler-specifics
 if(EMPLOY_GNUCOMPILER)
-	#add_definitions("-std=c++1z")
-	# set(MYVERBOSE "-fopt-info") # optimization details only
-	set(MYVERBOSE "-Wall") # all warnings
+	set(MYVERBOSE "-fopt-info-all=opt.all")
 	add_definitions("${MYOPTLEVEL}")
 	add_definitions("${MYVERBOSE}")
 	set(MYOMP "-fopenmp -lpthread")
@@ -88,52 +50,46 @@ if(EMPLOY_GNUCOMPILER)
 	add_definitions("-std=c++17")
 endif()
 
-#parallelization - MPI process-level
-#query location of MPI library
-message([STATUS] "MPI_INCLUDE_PATH ${MPI_INCLUDE_PATH}")
-if(EMPLOY_PARALLELISM_MPI)
-	find_package(MPI REQUIRED)
-	include_directories(${MPI_INCLUDE_PATH})
-endif()
-
-#specific paths of dependencies for this tool
-set(MYTOOLSRCPATH "${MYTOOLPATH}/src/cxx")
+set(MYTOOLSRCPATH "src/cxx")
+set(MYEXTPATH "../code/thirdparty/mandatory/hdf5cxxwrapper/src/cxx")
+set(MYVOROSRCPATH "../../../voro++/src")
+set(COMPILEPATH "../compiled_code")
 
 #list firstly the precompiled shared aka utils, secondly the tool-specific components, lastly the tool-specific main
 add_executable(${MYPROJECTNAME}
-	${MYUTILSPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OpenSSLInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CiteMe.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ConfigShared.cpp.o
-	${MYUTILSPATH}/PARAPROBE_FilePathHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_BitMangling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_HDF5Core.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Profiling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Math.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsContinuum.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsDiscrete.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Geometry.cpp.o
-	${MYUTILSPATH}/PARAPROBE_UserStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_MPIStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PeriodicTable.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Crystallography.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OriMath.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CGALInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Solutes.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Grains.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Precipitates.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Histogram2D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TwoPointStats3D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ROIs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_VoxelTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_AABBTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_KDTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_IonCloudMemory.cpp.o
-	${MYUTILSPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
+	${COMPILEPATH}/PARAPROBE_OpenSSLInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_CiteMe.cpp.o
+	${COMPILEPATH}/PARAPROBE_ConfigShared.cpp.o
+	${COMPILEPATH}/PARAPROBE_FilePathHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_BitMangling.cpp.o
+	${COMPILEPATH}/PARAPROBE_HDF5Core.cpp.o
+	${COMPILEPATH}/PARAPROBE_Profiling.cpp.o
+	${COMPILEPATH}/PARAPROBE_Math.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsContinuum.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsDiscrete.cpp.o
+	${COMPILEPATH}/PARAPROBE_Geometry.cpp.o
+	${COMPILEPATH}/PARAPROBE_UserStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_MPIStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_PeriodicTable.cpp.o
+	${COMPILEPATH}/PARAPROBE_Crystallography.cpp.o
+	${COMPILEPATH}/PARAPROBE_OriMath.cpp.o
+	${COMPILEPATH}/PARAPROBE_CGALInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_Solutes.cpp.o
+	${COMPILEPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
+	${COMPILEPATH}/PARAPROBE_Grains.cpp.o
+	${COMPILEPATH}/PARAPROBE_Precipitates.cpp.o
+	${COMPILEPATH}/PARAPROBE_Histogram2D.cpp.o
+	${COMPILEPATH}/PARAPROBE_TwoPointStats3D.cpp.o
+	${COMPILEPATH}/PARAPROBE_ROIs.cpp.o
+	${COMPILEPATH}/PARAPROBE_VoxelTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_AABBTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_KDTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_IonCloudMemory.cpp.o
+	${COMPILEPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
 
 	${MYTOOLSRCPATH}/PARAPROBE_ConfigDistancer.cpp
 	${MYTOOLSRCPATH}/PARAPROBE_DistancerStructs.cpp
diff --git a/code/paraprobe-intersector/CMakeLists.txt b/code/paraprobe-intersector/CMakeLists.txt
index ef5976a..b17e4e3 100644
--- a/code/paraprobe-intersector/CMakeLists.txt
+++ b/code/paraprobe-intersector/CMakeLists.txt
@@ -1,40 +1,17 @@
 cmake_minimum_required(VERSION 3.18.4)
 
-################################################################################################################################
-##DEVELOPER SECTION#############################################################################################################
-##in this section software developers need to make changes when debugging#######################################################
-################################################################################################################################
-#please name your project accordingly
 set(MYPROJECTNAME "paraprobe_intersector")
 message([STATUS] "Projectname is ${MYPROJECTNAME}")
-project(${MYPROJECTNAME} LANGUAGES CXX)
+project(${MYPROJECTNAME} LANGUAGES C CXX)
 set(CMAKE_BUILD_DIR "build")
 
-#pull general information about external libraries and paths related to paraprobe
-include("../PARAPROBE.Dependencies.cmake")
-message([STATUS] "MYPROJECTPATH: ${MYPROJECTPATH}")
-message([STATUS] "MYUTILSPATH: ${MYUTILSPATH}")
-message([STATUS] "MYHDF5PATH: ${MYHDFPATH}")
-message([STATUS] "MYBOOSTPATH: ${MYBOOSTPATH}")
-message([STATUS] "MYCGALPATH: ${MYCGALPATH}")
-message([STATUS] "MYEIGENPATH: ${MYEIGENPATH}")
-#message([STATUS] "MYTETGENPATH: ${MYTETGENPATH}")
-message([STATUS] "MYVOROXXPATH: ${MYVOROXXPATH}")
-
-#compose a tool-specific path
-set(MYTOOLPATH "${MYPROJECTPATH}/code/paraprobe-intersector/")
-message([STATUS] "MYTOOLPATH: ${MYTOOLPATH}")
-
-#identify which compiler to use
 set(EMPLOY_GNUCOMPILER ON)
+message([STATUS] "CONDA_PATH: ${CONDA_PREFIX}")
 message([STATUS] "MYCCC_COMPILER: __${CMAKE_C_COMPILER}__")
 message([STATUS] "MYCXX_COMPILER: __${CMAKE_CXX_COMPILER}__")
 
-#define which parallelization layers are used
 set(EMPLOY_PARALLELISM_CUDA OFF)
 
-#choose optimization level
-##-O0 nothing, debug purposes, -O1 moderate optimization, -O2 -O3 for production level up to aggressive architecture specific non-portable optimization
 if(EMPLOY_GNUCOMPILER)
 	set(MYOPTLEVEL "-O2")
 	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MYOPTLEVEL}")
@@ -42,107 +19,82 @@ if(EMPLOY_GNUCOMPILER)
 	message([STATUS] "We utilize optimization level ${MYOPTLEVEL}")
 endif()
 
-################################################################################################################################
-##END OF INTERACTION FOR NON PRO USERS##########################################################################################
-##here advanced users might want/need to make modifications if they use non default places for thirdparty libraries#############
-################################################################################################################################
-#HDF5 local installation for advanced I/O, collecting metadata and bundle analysis results together
-include_directories("${MYHDFPATH}/include")
-link_directories("${MYHDFPATH}/lib")
-set(MYHDFLINKFLAGS "-L${MYHDFPATH}/lib/ ${MYHDFPATH}/lib/libhdf5_hl.a ${MYHDFPATH}/lib/libhdf5.a ${MYHDFPATH}/lib/libz.a ${MYHDFPATH}/lib/libszaec.a ${MYHDFPATH}/lib/libaec.a -ldl")
-
-set(BOOST_ROOT "${MYBOOSTPATH}")
-set(Boost_NO_SYSTEM_PATHS ON)
-#set(Boost_INCLUDE_DIR "${MYBOOSTPATH}")
-set(CGAL_DIR "${MYCGALPATH}")
-set(EIGEN3_INCLUDE_DIR "${MYEIGENPATH}")
-include_directories("${MYEIGENPATH}")
-include_directories("${MYVOROXXPATH}/src")
-
-find_package(CGAL QUIET)
-if( CGAL_FOUND )
-	include( ${CGAL_USE_FILE} )
-	if (EMPLOY_MYEIGEN)
-		find_package(Eigen3 3.1.0 REQUIRED) #(3.1.0 or greater)
-		include(CGAL_Eigen3_support)
-		include_directories(${EIGEN3_INCLUDE_DIR})
-		if(NOT TARGET CGAL::Eigen3_support)
-			message(STATUS "This project requires the Eigen library, and will not be compiled.")
-			return()
-		endif()
-	endif()
-else()
-	message([FATAL_ERROR] "CGAL is required, employ it!")	
-endif()
+include_directories("${CONDA_PREFIX}/include/voro++")
+
+find_package(HDF5 REQUIRED)
+include_directories(${HDF5_INCLUDE_DIRS})
+set(MYHDFLINKFLAGS "-L${CONDA_PREFIX}/lib/ ${CONDA_PREFIX}/lib/libhdf5_hl.so ${CONDA_PREFIX}/lib/libhdf5.so ${CONDA_PREFIX}/lib/libz.so.1 ${CONDA_PREFIX}/lib/libsz.so ${CONDA_PREFIX}/lib/libaec.so -ldl")
+
+find_package(Boost REQUIRED)
+include_directories(${Boost_INCLUDE_DIRS})
+
+find_package(CGAL REQUIRED)
+include                     (${CGAL_USE_FILE})
+include_directories         (${CGAL_INCLUDE_DIRS})
 
-link_directories(${Boost_LIBRARY_DIR})
-find_package(Boost)
+find_package(Eigen3 3.3 REQUIRED)
+#include_directories         (${EIGEN3_INCLUDE_DIRS})
+include_directories("${CONDA_PREFIX}/include/eigen3")
 
-# include_directories("${MYTETGENPATH}")
-# link_directories("${MYTETGENPATH}")
-# set(MYTETGENLINKFLAGS "-L${MYTETGENPATH} ${MYTETGENPATH}/libtet.a")
+find_package(MPI REQUIRED)
+include_directories(${MPI_INCLUDE_PATH})
 
 find_package(OpenSSL REQUIRED)
 set(MYSSLLINKFLAGS "-lssl -lcrypto")
+
 #setting up compiler-specifics
 if(EMPLOY_GNUCOMPILER)
-	# set(MYVERBOSE "-fopt-info") # optimization details only
-	set(MYVERBOSE "-Wall") # all warnings
-	add_definitions("${MYOPTLEVEL}")
-	add_definitions("${MYVERBOSE}")
+	set(MYVERBOSE "-fopt-info-all=opt.all")
+	add_definitions("${MYOPTLEVEL} ${MYVERBOSE}")
 	set(MYOMP "-fopenmp -lpthread")
 	add_definitions(${MYOMP})
 	add_definitions("-std=c++17")
 endif()
 
-#parallelization - MPI process-level
-#query location of MPI library
-if(EMPLOY_PARALLELISM_MPI)
-	find_package(MPI REQUIRED)
-	include_directories(${MPI_INCLUDE_PATH})
-endif()
-
 #specific paths of dependencies for this tool
-set(MYTOOLSRCPATH "${MYTOOLPATH}/src/cxx")
+set(MYTOOLSRCPATH "src/cxx")
+set(MYEXTPATH "../code/thirdparty/mandatory/hdf5cxxwrapper/src/cxx")
+set(MYVOROSRCPATH "../../../voro++/src")
+set(COMPILEPATH "../compiled_code")
 
 #list firstly the precompiled shared aka utils, secondly the tool-specific components, lastly the tool-specific main
 add_executable(${MYPROJECTNAME}
-	${MYUTILSPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OpenSSLInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CiteMe.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ConfigShared.cpp.o
-	${MYUTILSPATH}/PARAPROBE_FilePathHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_BitMangling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_HDF5Core.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Profiling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Math.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsContinuum.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsDiscrete.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Geometry.cpp.o
-	${MYUTILSPATH}/PARAPROBE_UserStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_MPIStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PeriodicTable.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Crystallography.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OriMath.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CGALInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Solutes.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Grains.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Precipitates.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Histogram2D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TwoPointStats3D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ROIs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_VoxelTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_AABBTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_KDTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_IonCloudMemory.cpp.o
-	${MYUTILSPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
-
-	#${MYUTILSPATH}/../../${MYPROJECTPATH}code/thirdparty/mandatory/hornus2017/intersection-detection-master/vec.cpp
-	#${MYUTILSPATH}/../../${MYPROJECTPATH}code/thirdparty/mandatory/hornus2017/intersection-detection-master/convexes.cpp
+	${COMPILEPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
+	${COMPILEPATH}/PARAPROBE_OpenSSLInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_CiteMe.cpp.o
+	${COMPILEPATH}/PARAPROBE_ConfigShared.cpp.o
+	${COMPILEPATH}/PARAPROBE_FilePathHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_BitMangling.cpp.o
+	${COMPILEPATH}/PARAPROBE_HDF5Core.cpp.o
+	${COMPILEPATH}/PARAPROBE_Profiling.cpp.o
+	${COMPILEPATH}/PARAPROBE_Math.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsContinuum.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsDiscrete.cpp.o
+	${COMPILEPATH}/PARAPROBE_Geometry.cpp.o
+	${COMPILEPATH}/PARAPROBE_UserStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_MPIStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_PeriodicTable.cpp.o
+	${COMPILEPATH}/PARAPROBE_Crystallography.cpp.o
+	${COMPILEPATH}/PARAPROBE_OriMath.cpp.o
+	${COMPILEPATH}/PARAPROBE_CGALInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_Solutes.cpp.o
+	${COMPILEPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
+	${COMPILEPATH}/PARAPROBE_Grains.cpp.o
+	${COMPILEPATH}/PARAPROBE_Precipitates.cpp.o
+	${COMPILEPATH}/PARAPROBE_Histogram2D.cpp.o
+	${COMPILEPATH}/PARAPROBE_TwoPointStats3D.cpp.o
+	${COMPILEPATH}/PARAPROBE_ROIs.cpp.o
+	${COMPILEPATH}/PARAPROBE_VoxelTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_AABBTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_KDTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_IonCloudMemory.cpp.o
+	${COMPILEPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
+
+	#${COMPILEPATH}/../../${MYPROJECTPATH}code/thirdparty/mandatory/hornus2017/intersection-detection-master/vec.cpp
+	#${COMPILEPATH}/../../${MYPROJECTPATH}code/thirdparty/mandatory/hornus2017/intersection-detection-master/convexes.cpp
 	${MYTOOLSRCPATH}/CONFIG_Intersector.cpp
 	${MYTOOLSRCPATH}/PARAPROBE_IntersectorPQPInterface.cpp
 	${MYTOOLSRCPATH}/PARAPROBE_IntersectorStructs.cpp
@@ -157,7 +109,7 @@ add_executable(${MYPROJECTNAME}
 )
 
 #linking process, the target link libraries command is specific for each tool of the toolbox
-target_link_libraries(${MYPROJECTNAME} ${MYOMP} ${MPI_LIBRARIES} ${MYTETGENLINKFLAGS} ${MYHDFLINKFLAGS} -lgmp -lm ${Boost_LIBRARIES} ${MYSSLLINKFLAGS})
+target_link_libraries(${MYPROJECTNAME} ${MYOMP} ${MPI_LIBRARIES} ${MYHDFLINKFLAGS} -lgmp -lm ${Boost_LIBRARIES} ${MYSSLLINKFLAGS})
 #target_link_libraries( ${MYPROJECTNAME} PUBLIC CGAL::Eigen3_support ${MYOMP} ${MPI_LIBRARIES} ${MYTETGENLINKFLAGS} #${MYHDFLINKFLAGS} -lgmp -lm ${Boost_LIBRARIES}) #-lgomp -lpthread ${MYOPENACCLINK} ${MYCUFFTLINKFLAGS}
 
 #target_link_libraries( ${MYPROJECTNAME} -lgomp -lpthread ${MPI_LIBRARIES} ${MYTETGENLINKFLAGS} ${MYHDFLINKFLAGS} -lm ${Boost_LIBRARIES} )
diff --git a/code/paraprobe-nanochem/CMakeLists.txt b/code/paraprobe-nanochem/CMakeLists.txt
index 032a1b4..0625a4a 100644
--- a/code/paraprobe-nanochem/CMakeLists.txt
+++ b/code/paraprobe-nanochem/CMakeLists.txt
@@ -1,156 +1,97 @@
 cmake_minimum_required(VERSION 3.18.4)
 
-################################################################################################################################
-##DEVELOPER SECTION#############################################################################################################
-##in this section software developers need to make changes when debugging#######################################################
-################################################################################################################################
-#please name your project accordingly
 set(MYPROJECTNAME "paraprobe_nanochem")
 message([STATUS] "Projectname is ${MYPROJECTNAME}")
-project(${MYPROJECTNAME} LANGUAGES CXX)
+project(${MYPROJECTNAME} LANGUAGES C CXX)
 set(CMAKE_BUILD_DIR "build")
 
-#pull general information about external libraries and paths related to paraprobe
-include("../PARAPROBE.Dependencies.cmake")
-message([STATUS] "MYPROJECTPATH: ${MYPROJECTPATH}")
-message([STATUS] "MYUTILSPATH: ${MYUTILSPATH}")
-message([STATUS] "MYHDF5PATH: ${MYHDFPATH}")
-message([STATUS] "MYBOOSTPATH: ${MYBOOSTPATH}")
-message([STATUS] "MYCGALPATH: ${MYCGALPATH}")
-message([STATUS] "MYEIGENPATH: ${MYEIGENPATH}")
-message([STATUS] "MYVOROXXPATH: ${MYVOROXXPATH}")
-
-#compose a tool-specific path
-set(MYTOOLPATH "${MYPROJECTPATH}/code/paraprobe-nanochem/")
-message([STATUS] "MYTOOLPATH: ${MYTOOLPATH}")
-
-#identify which compiler to use
 set(EMPLOY_GNUCOMPILER ON)
+message([STATUS] "CONDA_PATH: ${CONDA_PREFIX}")
 message([STATUS] "MYCCC_COMPILER: __${CMAKE_C_COMPILER}__")
 message([STATUS] "MYCXX_COMPILER: __${CMAKE_CXX_COMPILER}__")
 
-#define which parallelization layers are used
 set(EMPLOY_PARALLELISM_CUDA OFF)
 
-#choose optimization level
-##-O0 nothing, debug purposes, -O1 moderate optimization, -O2 -O3 for production level up to aggressive architecture specific non-portable optimization
 if(EMPLOY_GNUCOMPILER)
-	set(MYOPTLEVEL "-O2")  # -ggdb
-	# problems where faced with inline functions in MarchingCubes when trying to compile with O0
+	set(MYOPTLEVEL "-O2")
 	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MYOPTLEVEL}")
 	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MYOPTLEVEL}")
 	message([STATUS] "We utilize optimization level ${MYOPTLEVEL}")
 endif()
 
-################################################################################################################################
-##END OF INTERACTION FOR NON PRO USERS##########################################################################################
-##here advanced users might want/need to make modifications if they use non default places for thirdparty libraries#############
-################################################################################################################################
-#HDF5 local installation for advanced I/O, collecting metadata and bundle analysis results together
-include_directories("${MYHDFPATH}/include")
-link_directories("${MYHDFPATH}/lib")
-set(MYHDFLINKFLAGS "-L${MYHDFPATH}/lib/ ${MYHDFPATH}/lib/libhdf5_hl.a ${MYHDFPATH}/lib/libhdf5.a ${MYHDFPATH}/lib/libz.a ${MYHDFPATH}/lib/libszaec.a ${MYHDFPATH}/lib/libaec.a -ldl")
-
-set(BOOST_ROOT "${MYBOOSTPATH}")
-set(Boost_NO_SYSTEM_PATHS ON)
-#set(Boost_INCLUDE_DIR "${MYBOOSTPATH}")
-#include_directories("${MYCGALPATH}")
-set(CGAL_DIR "${MYCGALPATH}")
-set(EIGEN3_INCLUDE_DIR "${MYEIGENPATH}")
-include_directories("${MYEIGENPATH}")
-include_directories("${MYVOROXXPATH}/src")
-
-#if(EMPLOY_MYEIGEN)
-#	#use eigen if available
-#	find_package(EIGEN3)
-#	if ( EIGEN3_FOUND )
-#		add_definitions(-DCGAL_EIGEN3_ENABLED)
-#		message([STATUS] "Eigen3 found and enabled !")
-#	endif()
-#endif()
-
-option(CGAL_HAS_THREADS "Use thread-safe parts of CGAL instead of assuming non thread-safe code" ON)
-find_package(CGAL QUIET)
-if( CGAL_FOUND )
-	include( ${CGAL_USE_FILE} )
-	if (EMPLOY_MYEIGEN)
-		find_package(Eigen3 3.1.0 REQUIRED) #(3.1.0 or greater)
-		include(CGAL_Eigen3_support)
-		if(NOT TARGET CGAL::Eigen3_support)
-			message(STATUS "This project requires the Eigen library, and will not be compiled.")
-		endif()
-	endif()
-else()
-	message([FATAL_ERROR] "CGAL is required, employ it!")
-endif()
+include_directories("${CONDA_PREFIX}/include/voro++")
+
+find_package(HDF5 REQUIRED)
+include_directories(${HDF5_INCLUDE_DIRS})
+set(MYHDFLINKFLAGS "-L${CONDA_PREFIX}/lib/ ${CONDA_PREFIX}/lib/libhdf5_hl.so ${CONDA_PREFIX}/lib/libhdf5.so ${CONDA_PREFIX}/lib/libz.so.1 ${CONDA_PREFIX}/lib/libsz.so ${CONDA_PREFIX}/lib/libaec.so -ldl")
+
+find_package(Boost REQUIRED)
+include_directories(${Boost_INCLUDE_DIRS})
 
-link_directories(${Boost_LIBRARY_DIR})
-find_package(Boost)
+find_package(CGAL REQUIRED)
+include                     (${CGAL_USE_FILE})
+include_directories         (${CGAL_INCLUDE_DIRS})
 
-# include_directories("${MYTETGENPATH}")
-# link_directories("${MYTETGENPATH}")
-# set(MYTETGENLINKFLAGS "-L${MYTETGENPATH} ${MYTETGENPATH}/libtet.a")
+find_package(Eigen3 3.3 REQUIRED)
+#include_directories         (${EIGEN3_INCLUDE_DIRS})
+include_directories("${CONDA_PREFIX}/include/eigen3")
+
+find_package(MPI REQUIRED)
+include_directories(${MPI_INCLUDE_PATH})
 
 find_package(OpenSSL REQUIRED)
 set(MYSSLLINKFLAGS "-lssl -lcrypto")
 
 #setting up compiler-specifics
 if(EMPLOY_GNUCOMPILER)
-	# set(MYVERBOSE "-fopt-info") # optimization details only
-	set(MYVERBOSE "-Wall") # all warnings
-	add_definitions("${MYOPTLEVEL}")
-	add_definitions("${MYVERBOSE}")
+	set(MYVERBOSE "-fopt-info-all=opt.all")
+	add_definitions("${MYOPTLEVEL} ${MYVERBOSE}")
 	set(MYOMP "-fopenmp -lpthread")
 	add_definitions(${MYOMP})
 	add_definitions("-std=c++17")
 endif()
 
-#parallelization - MPI process-level
-#query location of MPI library
-message([STATUS] "MPI_INCLUDE_PATH ${MPI_INCLUDE_PATH}")
-if(EMPLOY_PARALLELISM_MPI)
-	find_package(MPI REQUIRED)
-	include_directories(${MPI_INCLUDE_PATH})
-endif()
-
 #specific paths of dependencies for this tool
-set(MYTOOLSRCPATH "${MYTOOLPATH}/src/cxx")
+set(MYTOOLSRCPATH "src/cxx")
+set(MYEXTPATH "../code/thirdparty/mandatory/hdf5cxxwrapper/src/cxx")
+set(MYVOROSRCPATH "../../../voro++/src")
+set(COMPILEPATH "../compiled_code")
 
 #list firstly the precompiled shared aka utils, secondly the tool-specific components, lastly the tool-specific main
 add_executable(${MYPROJECTNAME}
-	${MYUTILSPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OpenSSLInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CiteMe.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ConfigShared.cpp.o
-	${MYUTILSPATH}/PARAPROBE_FilePathHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_BitMangling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_HDF5Core.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Profiling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Math.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsContinuum.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsDiscrete.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Geometry.cpp.o
-	${MYUTILSPATH}/PARAPROBE_UserStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_MPIStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PeriodicTable.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Crystallography.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OriMath.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CGALInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Solutes.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Grains.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Precipitates.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Histogram2D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TwoPointStats3D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ROIs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_VoxelTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_AABBTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_KDTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_IonCloudMemory.cpp.o
-	${MYUTILSPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
+	${COMPILEPATH}/PARAPROBE_OpenSSLInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_CiteMe.cpp.o
+	${COMPILEPATH}/PARAPROBE_ConfigShared.cpp.o
+	${COMPILEPATH}/PARAPROBE_FilePathHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_BitMangling.cpp.o
+	${COMPILEPATH}/PARAPROBE_HDF5Core.cpp.o
+	${COMPILEPATH}/PARAPROBE_Profiling.cpp.o
+	${COMPILEPATH}/PARAPROBE_Math.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsContinuum.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsDiscrete.cpp.o
+	${COMPILEPATH}/PARAPROBE_Geometry.cpp.o
+	${COMPILEPATH}/PARAPROBE_UserStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_MPIStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_PeriodicTable.cpp.o
+	${COMPILEPATH}/PARAPROBE_Crystallography.cpp.o
+	${COMPILEPATH}/PARAPROBE_OriMath.cpp.o
+	${COMPILEPATH}/PARAPROBE_CGALInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_Solutes.cpp.o
+	${COMPILEPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
+	${COMPILEPATH}/PARAPROBE_Grains.cpp.o
+	${COMPILEPATH}/PARAPROBE_Precipitates.cpp.o
+	${COMPILEPATH}/PARAPROBE_Histogram2D.cpp.o
+	${COMPILEPATH}/PARAPROBE_TwoPointStats3D.cpp.o
+	${COMPILEPATH}/PARAPROBE_ROIs.cpp.o
+	${COMPILEPATH}/PARAPROBE_VoxelTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_AABBTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_KDTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_IonCloudMemory.cpp.o
+	${COMPILEPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
 
 	${MYTOOLSRCPATH}/PARAPROBE_ConfigNanochem.cpp
 	${MYTOOLSRCPATH}/PARAPROBE_NanochemMCInterface.cpp
@@ -172,7 +113,7 @@ add_executable(${MYPROJECTNAME}
 )
 
 #linking process, the target link libraries command is specific for each tool of the toolbox
-target_link_libraries(${MYPROJECTNAME} ${MYOMP} ${MPI_LIBRARIES} ${MYTETGENLINKFLAGS} ${MYHDFLINKFLAGS} -lgmp -lm ${Boost_LIBRARIES} ${MYSSLLINKFLAGS}) #PUBLIC CGAL::Eigen3_support -lgomp -lpthread#${MYOPENACCLINK} ${MYCUFFTLINKFLAGS} 
+target_link_libraries(${MYPROJECTNAME} ${MYOMP} ${MPI_LIBRARIES} ${MYHDFLINKFLAGS} -lgmp -lm ${Boost_LIBRARIES} ${MYSSLLINKFLAGS}) #PUBLIC CGAL::Eigen3_support -lgomp -lpthread#${MYOPENACCLINK} ${MYCUFFTLINKFLAGS} 
 
 #MPI compilation settings
 if(MPI_COMPILE_FLAGS)
diff --git a/code/paraprobe-parmsetup/src/python/paraprobe_parmsetup.py b/code/paraprobe-parmsetup/src/python/paraprobe_parmsetup.py
deleted file mode 100644
index 5aa4acd..0000000
--- a/code/paraprobe-parmsetup/src/python/paraprobe_parmsetup.py
+++ /dev/null
@@ -1,32 +0,0 @@
-#
-# This file is part of paraprobe-toolbox.
-#
-# paraprobe-toolbox is free software: you can redistribute it and/or modify it
-# under the terms of the GNU General Public License as published by the
-# Free Software Foundation, either version 3 of the License,
-#  or (at your option) any later version.
-#
-# paraprobe-toolbox is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-# See the GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with paraprobe-toolbox. If not, see <https://www.gnu.org/licenses/>.
-#
-# Convenience wrapper to simply access to the guru interface of paraprobe
-
-
-from tools.transcoder_config import ParmsetupTranscoder
-from tools.ranger_config import ParmsetupRanger
-from tools.surfacer_config import ParmsetupSurfacer
-from tools.distancer_config import ParmsetupDistancer
-from tools.tessellator_config import ParmsetupTessellator
-from tools.spatstat_config import ParmsetupSpatstat
-from tools.nanochem_config import ParmsetupNanochem
-from tools.intersector_config import ParmsetupIntersector
-# clusterer?
-
-from utils.primscontinuum import RoiRotatedCuboid
-from utils.primscontinuum import RoiRotatedCylinder
-from utils.primscontinuum import RoiSphere
diff --git a/code/paraprobe-parmsetup/src/python/tools/__init__.py b/code/paraprobe-parmsetup/src/python/tools/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/code/paraprobe-parmsetup/src/python/tools/clusterer_config.py b/code/paraprobe-parmsetup/src/python/tools/clusterer_config.py
index 740a8df..ae1a026 100644
--- a/code/paraprobe-parmsetup/src/python/tools/clusterer_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/clusterer_config.py
@@ -28,14 +28,14 @@ from os.path import exists
 from ase.data import atomic_numbers, chemical_symbols
 from ifes_apt_tc_data_modeling.utils.nist_isotope_data import isotopes
 
-from .utils.numerics import \
+from paraprobe_parmsetup.utils.numerics import \
     TOOLS_IN_TOOLBOX, EPSILON, MAX_NUMBER_OF_ATOMS_PER_MOLECULAR_ION
 
-from .utils.hashing import get_file_hashvalue
+from paraprobe_parmsetup.utils.hashing import get_file_hashvalue
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 
 def symbol_lst_to_matrix_of_isotope_vector(
diff --git a/code/paraprobe-parmsetup/src/python/tools/distancer_config.py b/code/paraprobe-parmsetup/src/python/tools/distancer_config.py
index 41ed2b2..21de99e 100644
--- a/code/paraprobe-parmsetup/src/python/tools/distancer_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/distancer_config.py
@@ -19,13 +19,13 @@
 
 import numpy as np
 
-from .utils.numerics import TOOLS_IN_TOOLBOX, EPSILON
+from paraprobe_parmsetup.utils.numerics import TOOLS_IN_TOOLBOX, EPSILON
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
-from .utils.hashing import get_file_hashvalue
+from paraprobe_parmsetup.utils.hashing import get_file_hashvalue
 
 
 class PointToTriangleSoupDistancing(ParmsetupTaskBase):
diff --git a/code/paraprobe-parmsetup/src/python/tools/intersector_config.py b/code/paraprobe-parmsetup/src/python/tools/intersector_config.py
index f9481aa..7aaa98a 100644
--- a/code/paraprobe-parmsetup/src/python/tools/intersector_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/intersector_config.py
@@ -21,13 +21,13 @@ import numpy as np
 
 from ase.data import atomic_numbers
 
-from .utils.numerics import TOOLS_IN_TOOLBOX, EPSILON
+from paraprobe_parmsetup.utils.numerics import TOOLS_IN_TOOLBOX, EPSILON
 
-from .utils.hashing import get_file_hashvalue
+from paraprobe_parmsetup.utils.hashing import get_file_hashvalue
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 
 class VolumeFeatureSubSet:
diff --git a/code/paraprobe-parmsetup/src/python/tools/nanochem_config.py b/code/paraprobe-parmsetup/src/python/tools/nanochem_config.py
index 7cf9102..2e98043 100644
--- a/code/paraprobe-parmsetup/src/python/tools/nanochem_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/nanochem_config.py
@@ -25,14 +25,14 @@ from os.path import exists
 
 from ase.data import atomic_numbers, chemical_symbols
 
-from .utils.numerics import \
+from paraprobe_parmsetup.utils.numerics import \
     TOOLS_IN_TOOLBOX, EPSILON, MAX_NUMBER_OF_ATOMS_PER_MOLECULAR_ION
 
-from .utils.hashing import get_file_hashvalue
+from paraprobe_parmsetup.utils.hashing import get_file_hashvalue
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 
 class NanochemTask(ParmsetupTaskBase):
diff --git a/code/paraprobe-parmsetup/src/python/tools/ranger_config.py b/code/paraprobe-parmsetup/src/python/tools/ranger_config.py
index 6c9199c..76b59fe 100644
--- a/code/paraprobe-parmsetup/src/python/tools/ranger_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/ranger_config.py
@@ -25,12 +25,12 @@ import numpy as np
 
 from ase.data import atomic_numbers, chemical_symbols
 
-from .utils.numerics import \
+from paraprobe_parmsetup.utils.numerics import \
     TOOLS_IN_TOOLBOX, EPSILON, MAX_NUMBER_OF_ATOMS_PER_MOLECULAR_ION
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 from ifes_apt_tc_data_modeling.utils.nist_isotope_data import isotopes
 
diff --git a/code/paraprobe-parmsetup/src/python/tools/selector_config.py b/code/paraprobe-parmsetup/src/python/tools/selector_config.py
index 261747c..f0a0099 100644
--- a/code/paraprobe-parmsetup/src/python/tools/selector_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/selector_config.py
@@ -25,13 +25,13 @@ import numpy as np
 
 from os.path import exists
 
-from .utils.numerics import TOOLS_IN_TOOLBOX
+from paraprobe_parmsetup.utils.numerics import TOOLS_IN_TOOLBOX
 
-from .utils.hashing import get_file_hashvalue
+from paraprobe_parmsetup.utils.hashing import get_file_hashvalue
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 
 class RoiSelectionTask(ParmsetupTaskBase):
diff --git a/code/paraprobe-parmsetup/src/python/tools/spatstat_config.py b/code/paraprobe-parmsetup/src/python/tools/spatstat_config.py
index 09b3cc0..1cd21c0 100644
--- a/code/paraprobe-parmsetup/src/python/tools/spatstat_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/spatstat_config.py
@@ -28,15 +28,15 @@ from os.path import exists
 from ase.data import atomic_numbers, chemical_symbols
 from ifes_apt_tc_data_modeling.utils.nist_isotope_data import isotopes
 
-from .utils.numerics import TOOLS_IN_TOOLBOX, EPSILON
+from paraprobe_parmsetup.utils.numerics import TOOLS_IN_TOOLBOX, EPSILON
 
-from .utils.numerics import MAX_NUMBER_OF_ATOMS_PER_MOLECULAR_ION
+from paraprobe_parmsetup.utils.numerics import MAX_NUMBER_OF_ATOMS_PER_MOLECULAR_ION
 
-from .utils.hashing import get_file_hashvalue
+from paraprobe_parmsetup.utils.hashing import get_file_hashvalue
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 ## move this function to utils as it is reused for configuring multiple tools
 def symbol_lst_to_matrix_of_isotope_vector(
diff --git a/code/paraprobe-parmsetup/src/python/tools/surfacer_config.py b/code/paraprobe-parmsetup/src/python/tools/surfacer_config.py
index a38e1a3..85e8da3 100644
--- a/code/paraprobe-parmsetup/src/python/tools/surfacer_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/surfacer_config.py
@@ -19,11 +19,11 @@
 
 import numpy as np
 
-from .utils.numerics import TOOLS_IN_TOOLBOX, EPSILON
+from paraprobe_parmsetup.utils.numerics import TOOLS_IN_TOOLBOX, EPSILON
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 
 class SurfaceMeshingTask(ParmsetupTaskBase):
diff --git a/code/paraprobe-parmsetup/src/python/tools/tessellator_config.py b/code/paraprobe-parmsetup/src/python/tools/tessellator_config.py
index e0c3fe5..c39c87f 100644
--- a/code/paraprobe-parmsetup/src/python/tools/tessellator_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/tessellator_config.py
@@ -19,13 +19,13 @@
 
 import numpy as np
 
-from .utils.numerics import TOOLS_IN_TOOLBOX
+from paraprobe_parmsetup.utils.numerics import TOOLS_IN_TOOLBOX
 
-from .utils.hashing import get_file_hashvalue
+from paraprobe_parmsetup.utils.hashing import get_file_hashvalue
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 
 class TessellationTask(ParmsetupTaskBase):
diff --git a/code/paraprobe-parmsetup/src/python/tools/transcoder_config.py b/code/paraprobe-parmsetup/src/python/tools/transcoder_config.py
index 305654d..a001f72 100644
--- a/code/paraprobe-parmsetup/src/python/tools/transcoder_config.py
+++ b/code/paraprobe-parmsetup/src/python/tools/transcoder_config.py
@@ -19,13 +19,13 @@
 
 import numpy as np
 
-from .utils.numerics import TOOLS_IN_TOOLBOX
+from paraprobe_parmsetup.utils.numerics import TOOLS_IN_TOOLBOX
 
-from .utils.hashing import get_file_hashvalue
+from paraprobe_parmsetup.utils.hashing import get_file_hashvalue
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
-from .utils.supertool import ParmsetupBase, ParmsetupTaskBase
+from paraprobe_parmsetup.utils.supertool import ParmsetupBase, ParmsetupTaskBase
 
 
 class TranscodingTask(ParmsetupTaskBase):
diff --git a/code/paraprobe-parmsetup/src/python/tools/utils/felfergroup.py b/code/paraprobe-parmsetup/src/python/tools/utils/felfergroup.py
index 1eb744a..3ebcd0f 100644
--- a/code/paraprobe-parmsetup/src/python/tools/utils/felfergroup.py
+++ b/code/paraprobe-parmsetup/src/python/tools/utils/felfergroup.py
@@ -65,7 +65,7 @@ tmp.pop()
 ivec = []
 for isotope in tmp:
     neutron = 0  # else
-    chemical_symbol = # strip these
+    chemical_symbol = ""# strip these
     proton = atomic_numbers[chemical_symbol]
     ivec.append(hash_isotope(proton, neutron))
 del tmp
diff --git a/code/paraprobe-parmsetup/src/python/tools/utils/filters.py b/code/paraprobe-parmsetup/src/python/tools/utils/filters.py
index 9aff6c7..18df491 100644
--- a/code/paraprobe-parmsetup/src/python/tools/utils/filters.py
+++ b/code/paraprobe-parmsetup/src/python/tools/utils/filters.py
@@ -22,7 +22,7 @@
 
 import numpy as np
 
-from .utils.nodeinfo import NodeInfo
+from paraprobe_parmsetup.utils.nodeinfo import NodeInfo
 
 
 class EvaporationIdFilter:
diff --git a/code/paraprobe-parmsetup/src/python/tools/utils/primscontinuum.py b/code/paraprobe-parmsetup/src/python/tools/utils/primscontinuum.py
index 0754dcb..4203eb3 100644
--- a/code/paraprobe-parmsetup/src/python/tools/utils/primscontinuum.py
+++ b/code/paraprobe-parmsetup/src/python/tools/utils/primscontinuum.py
@@ -18,7 +18,7 @@
 
 import numpy as np
 
-from .numerics import EPSILON
+from paraprobe_parmsetup.utils.numerics import EPSILON
 
 
 class RoiRotatedCuboid:
diff --git a/code/paraprobe-ranger/CMakeLists.txt b/code/paraprobe-ranger/CMakeLists.txt
index 208a709..9e58988 100755
--- a/code/paraprobe-ranger/CMakeLists.txt
+++ b/code/paraprobe-ranger/CMakeLists.txt
@@ -1,34 +1,17 @@
 cmake_minimum_required(VERSION 3.18.4)
 
-################################################################################################################################
-##DEVELOPER SECTION#############################################################################################################
-##in this section software developers need to make changes when debugging#######################################################
-################################################################################################################################
-#please name your project accordingly
 set(MYPROJECTNAME "paraprobe_ranger")
 message([STATUS] "Projectname is ${MYPROJECTNAME}")
-project(${MYPROJECTNAME} LANGUAGES CXX)
+project(${MYPROJECTNAME} LANGUAGES C CXX)
 set(CMAKE_BUILD_DIR "build")
 
-#pull general information about external libraries and paths related to paraprobe
-include("../PARAPROBE.Dependencies.cmake")
-message([STATUS] "MYPROJECTPATH: ${MYPROJECTPATH}")
-message([STATUS] "MYUTILSPATH: ${MYUTILSPATH}")
-message([STATUS] "MYHDF5PATH: ${MYHDFPATH}")
-message([STATUS] "MYVOROXXPATH: ${MYVOROXXPATH}")
-
-#compose a tool-specific path
-set(MYTOOLPATH "${MYPROJECTPATH}/code/paraprobe-ranger/")
-message([STATUS] "MYTOOLPATH: ${MYTOOLPATH}")
 set(EMPLOY_GNUCOMPILER ON)
+message([STATUS] "CONDA_PATH: ${CONDA_PREFIX}")
 message([STATUS] "MYCCC_COMPILER: __${CMAKE_C_COMPILER}__")
 message([STATUS] "MYCXX_COMPILER: __${CMAKE_CXX_COMPILER}__")
 
-#define which parallelization layers are used
 set(EMPLOY_PARALLELISM_CUDA OFF)
 
-#choose optimization level
-##-O0 nothing, debug purposes, -O1 moderate optimization, -O2 -O3 for production level up to aggressive architecture specific non-portable optimization
 if(EMPLOY_GNUCOMPILER)
 	set(MYOPTLEVEL "-O2")
 	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MYOPTLEVEL}")
@@ -36,103 +19,80 @@ if(EMPLOY_GNUCOMPILER)
 	message([STATUS] "We utilize optimization level ${MYOPTLEVEL}")
 endif()
 
-################################################################################################################################
-##END OF INTERACTION FOR NON PRO USERS##########################################################################################
-##here advanced users might want/need to make modifications if they use non default places for thirdparty libraries#############
-################################################################################################################################
-#HDF5 local installation for advanced I/O, collecting metadata and bundle analysis results together
-include_directories("${MYHDFPATH}/include")
-link_directories("${MYHDFPATH}/lib")
-set(MYHDFLINKFLAGS "-L${MYHDFPATH}/lib/ ${MYHDFPATH}/lib/libhdf5_hl.a ${MYHDFPATH}/lib/libhdf5.a ${MYHDFPATH}/lib/libz.a ${MYHDFPATH}/lib/libszaec.a ${MYHDFPATH}/lib/libaec.a -ldl")
-
-set(BOOST_ROOT "${MYBOOSTPATH}")
-set(Boost_NO_SYSTEM_PATHS ON)
-#set(Boost_INCLUDE_DIR "${MYBOOSTPATH}")
-#include_directories("${MYCGALPATH}")
-set(CGAL_DIR "${MYCGALPATH}")
-include_directories("${MYEIGENPATH}")
-include_directories("${MYVOROXXPATH}/src")
-
-#GMP and MPFR is included and found alongside the CGAL library
-#connect with ExternalLibraries.cmake via MYCGALHOME and MYEIGENHOME
-find_package(CGAL QUIET)
-if( CGAL_FOUND )
-	include( ${CGAL_USE_FILE} )
-	if (EMPLOY_MYEIGEN)
-		find_package(Eigen3 3.1.0 REQUIRED) #(3.1.0 or greater)
-		include(CGAL_Eigen3_support)
-		if(NOT TARGET CGAL::Eigen3_support)
-			message(STATUS "This project requires the Eigen library, and will not be compiled.")
-			return()
-		endif()
-	endif()
-endif()
 
-#connect with ExternalLibraries.cmake via MYBOOSTHOME
-#include_directories(${Boost_INCLUDE_DIR})
-link_directories(${Boost_LIBRARY_DIR})
-find_package(Boost)
+include_directories("${CONDA_PREFIX}/include/voro++")
+
+find_package(HDF5 REQUIRED)
+include_directories(${HDF5_INCLUDE_DIRS})
+set(MYHDFLINKFLAGS "-L${CONDA_PREFIX}/lib/ ${CONDA_PREFIX}/lib/libhdf5_hl.so ${CONDA_PREFIX}/lib/libhdf5.so ${CONDA_PREFIX}/lib/libz.so.1 ${CONDA_PREFIX}/lib/libsz.so ${CONDA_PREFIX}/lib/libaec.so -ldl")
+
+find_package(Boost REQUIRED)
+include_directories(${Boost_INCLUDE_DIRS})
+
+find_package(CGAL REQUIRED)
+include                     (${CGAL_USE_FILE})
+include_directories         (${CGAL_INCLUDE_DIRS})
+
+find_package(Eigen3 3.3 REQUIRED)
+#include_directories         (${EIGEN3_INCLUDE_DIRS})
+include_directories("${CONDA_PREFIX}/include/eigen3")
+
+find_package(MPI REQUIRED)
+include_directories(${MPI_INCLUDE_PATH})
 
 find_package(OpenSSL REQUIRED)
 set(MYSSLLINKFLAGS "-lssl -lcrypto")
 
 #setting up compiler-specifics
 if(EMPLOY_GNUCOMPILER)
-	# set(MYVERBOSE "-fopt-info") # optimization details only
-	set(MYVERBOSE "-Wall") # all warnings
-	add_definitions("${MYOPTLEVEL}")
-	add_definitions("${MYVERBOSE}")
+	set(MYVERBOSE "-fopt-info-all=opt.all")
+	add_definitions("${MYOPTLEVEL} ${MYVERBOSE}")
 	set(MYOMP "-fopenmp -lpthread")
 	add_definitions(${MYOMP})
 	add_definitions("-std=c++17")
 endif()
 
-#parallelization - MPI process-level
-#query location of MPI library
-message([STATUS] "MPI_INCLUDE_PATH ${MPI_INCLUDE_PATH}")
-if(EMPLOY_PARALLELISM_MPI)
-	find_package(MPI REQUIRED)
-	include_directories(${MPI_INCLUDE_PATH})
-endif()
-
 #specific paths of dependencies for this tool
-set(MYTOOLSRCPATH "${MYTOOLPATH}/src/cxx")
+set(MYTOOLSRCPATH "src/cxx")
+set(MYEXTPATH "../code/thirdparty/mandatory/hdf5cxxwrapper/src/cxx")
+set(MYVOROSRCPATH "../../../voro++/src")
+set(COMPILEPATH "../compiled_code")
 
 #list firstly the precompiled shared aka utils, secondly the tool-specific components, lastly the tool-specific main
 add_executable(${MYPROJECTNAME}
-	${MYUTILSPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OpenSSLInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CiteMe.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ConfigShared.cpp.o
-	${MYUTILSPATH}/PARAPROBE_FilePathHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_BitMangling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_HDF5Core.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Profiling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Math.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsContinuum.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsDiscrete.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Geometry.cpp.o
-	${MYUTILSPATH}/PARAPROBE_UserStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_MPIStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PeriodicTable.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Crystallography.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OriMath.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CGALInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Solutes.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Grains.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Precipitates.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Histogram2D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TwoPointStats3D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ROIs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_VoxelTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_AABBTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_KDTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_IonCloudMemory.cpp.o
-	${MYUTILSPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
+	${COMPILEPATH}/PARAPROBE_OpenSSLInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_CiteMe.cpp.o
+	${COMPILEPATH}/PARAPROBE_ConfigShared.cpp.o
+	${COMPILEPATH}/PARAPROBE_FilePathHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_BitMangling.cpp.o
+	${COMPILEPATH}/PARAPROBE_HDF5Core.cpp.o
+	${COMPILEPATH}/PARAPROBE_Profiling.cpp.o
+	${COMPILEPATH}/PARAPROBE_Math.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsContinuum.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsDiscrete.cpp.o
+	${COMPILEPATH}/PARAPROBE_Geometry.cpp.o
+	${COMPILEPATH}/PARAPROBE_UserStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_MPIStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_PeriodicTable.cpp.o
+	${COMPILEPATH}/PARAPROBE_Crystallography.cpp.o
+	${COMPILEPATH}/PARAPROBE_OriMath.cpp.o
+	${COMPILEPATH}/PARAPROBE_CGALInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_Solutes.cpp.o
+	${COMPILEPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
+	${COMPILEPATH}/PARAPROBE_Grains.cpp.o
+	${COMPILEPATH}/PARAPROBE_Precipitates.cpp.o
+	${COMPILEPATH}/PARAPROBE_Histogram2D.cpp.o
+	${COMPILEPATH}/PARAPROBE_TwoPointStats3D.cpp.o
+	${COMPILEPATH}/PARAPROBE_ROIs.cpp.o
+	${COMPILEPATH}/PARAPROBE_VoxelTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_AABBTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_KDTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_IonCloudMemory.cpp.o
+	${COMPILEPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
 
 	${MYTOOLSRCPATH}/PARAPROBE_ConfigRanger.cpp
 	${MYTOOLSRCPATH}/PARAPROBE_RangerStructs.cpp
diff --git a/code/paraprobe-spatstat/CMakeLists.txt b/code/paraprobe-spatstat/CMakeLists.txt
index 04d31c4..5389dee 100644
--- a/code/paraprobe-spatstat/CMakeLists.txt
+++ b/code/paraprobe-spatstat/CMakeLists.txt
@@ -1,35 +1,18 @@
 cmake_minimum_required(VERSION 3.18.4)
 
-################################################################################################################################
-##DEVELOPER SECTION#############################################################################################################
-##in this section software developers need to make changes when debugging#######################################################
-################################################################################################################################
-
 #please name your project accordingly
 set(MYPROJECTNAME "paraprobe_spatstat")
 message([STATUS] "Projectname is ${MYPROJECTNAME}")
-project(${MYPROJECTNAME} LANGUAGES CXX)
+project(${MYPROJECTNAME} LANGUAGES C CXX)
 set(CMAKE_BUILD_DIR "build")
 
-#pull general information about external libraries and paths related to paraprobe
-include("../PARAPROBE.Dependencies.cmake")
-message([STATUS] "MYPROJECTPATH: ${MYPROJECTPATH}")
-message([STATUS] "MYUTILSPATH: ${MYUTILSPATH}")
-message([STATUS] "MYHDF5PATH: ${MYHDFPATH}")
-message([STATUS] "MYVOROXXPATH: ${MYVOROXXPATH}")
-
-#compose a tool-specific path
-set(MYTOOLPATH "${MYPROJECTPATH}/code/paraprobe-spatstat/")
-message([STATUS] "MYTOOLPATH: ${MYTOOLPATH}")
 set(EMPLOY_GNUCOMPILER ON)
+message([STATUS] "CONDA_PATH: ${CONDA_PREFIX}")
 message([STATUS] "MYCCC_COMPILER: __${CMAKE_C_COMPILER}__")
 message([STATUS] "MYCXX_COMPILER: __${CMAKE_CXX_COMPILER}__")
 
-#define which parallelization layers are used
 set(EMPLOY_PARALLELISM_CUDA OFF)
 
-#choose optimization level
-##-O0 nothing, debug purposes, -O1 moderate optimization, -O2 -O3 for production level up to aggressive architecture specific non-portable optimization
 if(EMPLOY_GNUCOMPILER)
 	set(MYOPTLEVEL "-O2")
 	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MYOPTLEVEL}")
@@ -37,102 +20,79 @@ if(EMPLOY_GNUCOMPILER)
 	message([STATUS] "We utilize optimization level ${MYOPTLEVEL}")
 endif()
 
-################################################################################################################################
-##END OF INTERACTION FOR NON PRO USERS##########################################################################################
-##here advanced users might want/need to make modifications if they use non default places for thirdparty libraries#############
-################################################################################################################################
-#HDF5 local installation for advanced I/O, collecting metadata and bundle analysis results together
-include_directories("${MYHDFPATH}/include")
-link_directories("${MYHDFPATH}/lib")
-set(MYHDFLINKFLAGS "-L${MYHDFPATH}/lib/ ${MYHDFPATH}/lib/libhdf5_hl.a ${MYHDFPATH}/lib/libhdf5.a ${MYHDFPATH}/lib/libz.a ${MYHDFPATH}/lib/libszaec.a ${MYHDFPATH}/lib/libaec.a -ldl")
-
-set(BOOST_ROOT "${MYBOOSTPATH}")
-set(Boost_NO_SYSTEM_PATHS ON)
-#set(Boost_INCLUDE_DIR "${MYBOOSTPATH}")
-#include_directories("${MYCGALPATH}")
-set(CGAL_DIR "${MYCGALPATH}")
-include_directories("${MYEIGENPATH}")
-include_directories("${MYVOROXXPATH}/src")
-
-#GMP and MPFR is included and found alongside the CGAL library
-#connect with ExternalLibraries.cmake via MYCGALHOME and MYEIGENHOME
-find_package(CGAL QUIET)
-if( CGAL_FOUND )
-	include( ${CGAL_USE_FILE} )
-	if (EMPLOY_MYEIGEN)
-		find_package(Eigen3 3.1.0 REQUIRED) #(3.1.0 or greater)
-		include(CGAL_Eigen3_support)
-		if(NOT TARGET CGAL::Eigen3_support)
-			message(STATUS "This project requires the Eigen library, and will not be compiled.")
-			return()
-		endif()
-	endif()
-endif()
+include_directories("${CONDA_PREFIX}/include/voro++")
+
+find_package(HDF5 REQUIRED)
+include_directories(${HDF5_INCLUDE_DIRS})
+set(MYHDFLINKFLAGS "-L${CONDA_PREFIX}/lib/ ${CONDA_PREFIX}/lib/libhdf5_hl.so ${CONDA_PREFIX}/lib/libhdf5.so ${CONDA_PREFIX}/lib/libz.so.1 ${CONDA_PREFIX}/lib/libsz.so ${CONDA_PREFIX}/lib/libaec.so -ldl")
+
+find_package(Boost REQUIRED)
+include_directories(${Boost_INCLUDE_DIRS})
 
-#connect with ExternalLibraries.cmake via MYBOOSTHOME
-#include_directories(${Boost_INCLUDE_DIR})
-link_directories(${Boost_LIBRARY_DIR})
-find_package(Boost)
+find_package(CGAL REQUIRED)
+include                     (${CGAL_USE_FILE})
+include_directories         (${CGAL_INCLUDE_DIRS})
+
+find_package(Eigen3 3.3 REQUIRED)
+#include_directories         (${EIGEN3_INCLUDE_DIRS})
+include_directories("${CONDA_PREFIX}/include/eigen3")
+
+find_package(MPI REQUIRED)
+include_directories(${MPI_INCLUDE_PATH})
 
 find_package(OpenSSL REQUIRED)
 set(MYSSLLINKFLAGS "-lssl -lcrypto")
+
 #setting up compiler-specifics
 if(EMPLOY_GNUCOMPILER)
-	# set(MYVERBOSE "-fopt-info") # optimization details only
-	set(MYVERBOSE "-Wall") # all warnings
-	add_definitions("${MYOPTLEVEL}")
-	add_definitions("${MYVERBOSE}")
+	set(MYVERBOSE "-fopt-info-all=opt.all")
+	add_definitions("${MYOPTLEVEL} ${MYVERBOSE}")
 	set(MYOMP "-fopenmp -lpthread")
 	add_definitions(${MYOMP})
-	add_definitions("-std=c++17")
-endif()
-
-#parallelization - MPI process-level
-#query location of MPI library
-message([STATUS] "MPI_INCLUDE_PATH ${MPI_INCLUDE_PATH}")
-if(EMPLOY_PARALLELISM_MPI)
-	find_package(MPI REQUIRED)
-	include_directories(${MPI_INCLUDE_PATH})
+	add_definitions("-std=c++14")
 endif()
 
 #specific paths of dependencies for this tool
-set(MYTOOLSRCPATH "${MYTOOLPATH}/src/cxx")
+set(MYTOOLSRCPATH "src/cxx")
+set(MYEXTPATH "../code/thirdparty/mandatory/hdf5cxxwrapper/src/cxx")
+set(MYVOROSRCPATH "../../../voro++/src")
+set(COMPILEPATH "../compiled_code")
 
 #list firstly the precompiled shared aka utils, secondly the tool-specific components, lastly the tool-specific main
 add_executable(${MYPROJECTNAME}
-	${MYUTILSPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OpenSSLInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CiteMe.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ConfigShared.cpp.o
-	${MYUTILSPATH}/PARAPROBE_FilePathHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_BitMangling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_HDF5Core.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Profiling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Math.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsContinuum.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsDiscrete.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Geometry.cpp.o
-	${MYUTILSPATH}/PARAPROBE_UserStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_MPIStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PeriodicTable.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Crystallography.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OriMath.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CGALInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Solutes.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Grains.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Precipitates.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Histogram2D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TwoPointStats3D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ROIs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_VoxelTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_AABBTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_KDTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_IonCloudMemory.cpp.o
-	${MYUTILSPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
+	${COMPILEPATH}/PARAPROBE_OpenSSLInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_CiteMe.cpp.o
+	${COMPILEPATH}/PARAPROBE_ConfigShared.cpp.o
+	${COMPILEPATH}/PARAPROBE_FilePathHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_BitMangling.cpp.o
+	${COMPILEPATH}/PARAPROBE_HDF5Core.cpp.o
+	${COMPILEPATH}/PARAPROBE_Profiling.cpp.o
+	${COMPILEPATH}/PARAPROBE_Math.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsContinuum.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsDiscrete.cpp.o
+	${COMPILEPATH}/PARAPROBE_Geometry.cpp.o
+	${COMPILEPATH}/PARAPROBE_UserStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_MPIStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_PeriodicTable.cpp.o
+	${COMPILEPATH}/PARAPROBE_Crystallography.cpp.o
+	${COMPILEPATH}/PARAPROBE_OriMath.cpp.o
+	${COMPILEPATH}/PARAPROBE_CGALInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_Solutes.cpp.o
+	${COMPILEPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
+	${COMPILEPATH}/PARAPROBE_Grains.cpp.o
+	${COMPILEPATH}/PARAPROBE_Precipitates.cpp.o
+	${COMPILEPATH}/PARAPROBE_Histogram2D.cpp.o
+	${COMPILEPATH}/PARAPROBE_TwoPointStats3D.cpp.o
+	${COMPILEPATH}/PARAPROBE_ROIs.cpp.o
+	${COMPILEPATH}/PARAPROBE_VoxelTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_AABBTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_KDTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_IonCloudMemory.cpp.o
+	${COMPILEPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
 
 	${MYTOOLSRCPATH}/PARAPROBE_ConfigSpatstat.cpp
 	${MYTOOLSRCPATH}/PARAPROBE_SpatstatStructs.cpp
diff --git a/code/paraprobe-surfacer/CMakeLists.txt b/code/paraprobe-surfacer/CMakeLists.txt
index 84c37f6..51ae85f 100755
--- a/code/paraprobe-surfacer/CMakeLists.txt
+++ b/code/paraprobe-surfacer/CMakeLists.txt
@@ -1,38 +1,17 @@
 cmake_minimum_required(VERSION 3.18.4)
 
-################################################################################################################################
-##DEVELOPER SECTION#############################################################################################################
-##in this section software developers need to make changes when debugging#######################################################
-################################################################################################################################
-#please name your project accordingly
 set(MYPROJECTNAME "paraprobe_surfacer")
 message([STATUS] "Projectname is ${MYPROJECTNAME}")
-project(${MYPROJECTNAME} LANGUAGES CXX)
+project(${MYPROJECTNAME} LANGUAGES C CXX)
 set(CMAKE_BUILD_DIR "build")
 
-#pull general information about external libraries and paths related to paraprobe
-include("../PARAPROBE.Dependencies.cmake")
-message([STATUS] "MYPROJECTPATH: ${MYPROJECTPATH}")
-message([STATUS] "MYUTILSPATH: ${MYUTILSPATH}")
-message([STATUS] "MYHDF5PATH: ${MYHDFPATH}")
-message([STATUS] "MYBOOSTPATH: ${MYBOOSTPATH}")
-message([STATUS] "MYCGALPATH: ${MYCGALPATH}")
-message([STATUS] "MYEIGENPATH: ${MYEIGENPATH}")
-message([STATUS] "MYVOROXXPATH: ${MYVOROXXPATH}")
-
-#compose a tool-specific path
-set(MYTOOLPATH "${MYPROJECTPATH}/code/paraprobe-surfacer/")
-message([STATUS] "MYTOOLPATH: ${MYTOOLPATH}")
-
 set(EMPLOY_GNUCOMPILER ON)
+message([STATUS] "CONDA_PATH: ${CONDA_PREFIX}")
 message([STATUS] "MYCCC_COMPILER: __${CMAKE_C_COMPILER}__")
 message([STATUS] "MYCXX_COMPILER: __${CMAKE_CXX_COMPILER}__")
 
-#define which parallelization layers are used
 set(EMPLOY_PARALLELISM_CUDA OFF)
 
-#choose optimization level
-##-O0 nothing, debug purposes, -O1 moderate optimization, -O2 -O3 for production level up to aggressive architecture specific non-portable optimization
 if(EMPLOY_GNUCOMPILER)
 	set(MYOPTLEVEL "-O2")
 	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MYOPTLEVEL}")
@@ -40,53 +19,33 @@ if(EMPLOY_GNUCOMPILER)
 	message([STATUS] "We utilize optimization level ${MYOPTLEVEL}")
 endif()
 
-################################################################################################################################
-##END OF INTERACTION FOR NON PRO USERS##########################################################################################
-##here advanced users might want/need to make modifications if they use non default places for thirdparty libraries#############
-################################################################################################################################
-#HDF5 local installation for advanced I/O, collecting metadata and bundle analysis results together
-include_directories("${MYHDFPATH}/include")
-link_directories("${MYHDFPATH}/lib")
-set(MYHDFLINKFLAGS "-L${MYHDFPATH}/lib/ ${MYHDFPATH}/lib/libhdf5_hl.a ${MYHDFPATH}/lib/libhdf5.a ${MYHDFPATH}/lib/libz.a ${MYHDFPATH}/lib/libszaec.a ${MYHDFPATH}/lib/libaec.a -ldl")
-
-set(BOOST_ROOT "${MYBOOSTPATH}")
-set(Boost_NO_SYSTEM_PATHS ON)
-#set(Boost_INCLUDE_DIR "${MYBOOSTPATH}")
-#include_directories("${MYCGALPATH}")
-set(CGAL_DIR "${MYCGALPATH}")
-include_directories("${MYEIGENPATH}")
-include_directories("${MYVOROXXPATH}/src")
-
-#GMP and MPFR is included and found alongside the CGAL library
-#connect with ExternalLibraries.cmake via MYCGALHOME and MYEIGENHOME
-option(CGAL_HAS_THREADS "Use thread-safe parts of CGAL instead of assuming non thread-safe code" ON)
-find_package(CGAL QUIET)
-if( CGAL_FOUND )
-	include( ${CGAL_USE_FILE} )
-	if (EMPLOY_MYEIGEN)
-		find_package(Eigen3 3.1.0 REQUIRED) #(3.1.0 or greater)
-		include(CGAL_Eigen3_support)
-		if(NOT TARGET CGAL::Eigen3_support)
-			message(STATUS "This project requires the Eigen library, and will not be compiled.")
-			return()
-		endif()
-	endif()
-endif()
+include_directories("${CONDA_PREFIX}/include/voro++")
+
+find_package(HDF5 REQUIRED)
+include_directories(${HDF5_INCLUDE_DIRS})
+set(MYHDFLINKFLAGS "-L${CONDA_PREFIX}/lib/ ${CONDA_PREFIX}/lib/libhdf5_hl.so ${CONDA_PREFIX}/lib/libhdf5.so ${CONDA_PREFIX}/lib/libz.so.1 ${CONDA_PREFIX}/lib/libsz.so ${CONDA_PREFIX}/lib/libaec.so -ldl")
+
+find_package(Boost REQUIRED)
+include_directories(${Boost_INCLUDE_DIRS})
+
+find_package(CGAL REQUIRED)
+include                     (${CGAL_USE_FILE})
+include_directories         (${CGAL_INCLUDE_DIRS})
+
+find_package(Eigen3 3.3 REQUIRED)
+#include_directories         (${EIGEN3_INCLUDE_DIRS})
+include_directories("${CONDA_PREFIX}/include/eigen3")
 
-#connect with ExternalLibraries.cmake via MYBOOSTHOME
-#include_directories(${Boost_INCLUDE_DIR})
-link_directories(${Boost_LIBRARY_DIR})
-find_package(Boost)
+find_package(MPI REQUIRED)
+include_directories(${MPI_INCLUDE_PATH})
 
 find_package(OpenSSL REQUIRED)
 set(MYSSLLINKFLAGS "-lssl -lcrypto")
 
 #setting up compiler-specifics
 if(EMPLOY_GNUCOMPILER)
-	# set(MYVERBOSE "-fopt-info") # optimization details only
-	set(MYVERBOSE "-Wall") # all warnings
-	add_definitions("${MYOPTLEVEL}")
-	add_definitions("${MYVERBOSE}")
+	set(MYVERBOSE "-fopt-info-all=opt.all")
+	add_definitions("${MYOPTLEVEL} ${MYVERBOSE}")
 	set(MYOMP "-fopenmp -lpthread")
 	add_definitions(${MYOMP})
 	add_definitions("-std=c++17")
@@ -101,43 +60,46 @@ if(EMPLOY_PARALLELISM_MPI)
 endif()
 
 #specific paths of dependencies for this tool
-set(MYTOOLSRCPATH "${MYTOOLPATH}/src/cxx")
+set(MYTOOLSRCPATH "src/cxx")
+set(MYEXTPATH "../code/thirdparty/mandatory/hdf5cxxwrapper/src/cxx")
+set(MYVOROSRCPATH "../../../voro++/src")
+set(COMPILEPATH "../compiled_code")
 
 #list firstly the precompiled shared aka utils, secondly the tool-specific components, lastly the tool-specific main
 add_executable(${MYPROJECTNAME}
-	${MYUTILSPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OpenSSLInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CiteMe.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ConfigShared.cpp.o
-	${MYUTILSPATH}/PARAPROBE_FilePathHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_BitMangling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_HDF5Core.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Profiling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Math.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsContinuum.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsDiscrete.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Geometry.cpp.o
-	${MYUTILSPATH}/PARAPROBE_UserStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_MPIStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PeriodicTable.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Crystallography.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OriMath.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CGALInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Solutes.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Grains.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Precipitates.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Histogram2D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TwoPointStats3D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ROIs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_VoxelTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_AABBTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_KDTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_IonCloudMemory.cpp.o
-	${MYUTILSPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
+	${COMPILEPATH}/PARAPROBE_OpenSSLInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_CiteMe.cpp.o
+	${COMPILEPATH}/PARAPROBE_ConfigShared.cpp.o
+	${COMPILEPATH}/PARAPROBE_FilePathHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_BitMangling.cpp.o
+	${COMPILEPATH}/PARAPROBE_HDF5Core.cpp.o
+	${COMPILEPATH}/PARAPROBE_Profiling.cpp.o
+	${COMPILEPATH}/PARAPROBE_Math.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsContinuum.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsDiscrete.cpp.o
+	${COMPILEPATH}/PARAPROBE_Geometry.cpp.o
+	${COMPILEPATH}/PARAPROBE_UserStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_MPIStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_PeriodicTable.cpp.o
+	${COMPILEPATH}/PARAPROBE_Crystallography.cpp.o
+	${COMPILEPATH}/PARAPROBE_OriMath.cpp.o
+	${COMPILEPATH}/PARAPROBE_CGALInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_Solutes.cpp.o
+	${COMPILEPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
+	${COMPILEPATH}/PARAPROBE_Grains.cpp.o
+	${COMPILEPATH}/PARAPROBE_Precipitates.cpp.o
+	${COMPILEPATH}/PARAPROBE_Histogram2D.cpp.o
+	${COMPILEPATH}/PARAPROBE_TwoPointStats3D.cpp.o
+	${COMPILEPATH}/PARAPROBE_ROIs.cpp.o
+	${COMPILEPATH}/PARAPROBE_VoxelTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_AABBTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_KDTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_IonCloudMemory.cpp.o
+	${COMPILEPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
 
 	${MYTOOLSRCPATH}/PARAPROBE_ConfigSurfacer.cpp
 	${MYTOOLSRCPATH}/PARAPROBE_SurfacerStructs.cpp
diff --git a/code/paraprobe-tessellator/CMakeLists.txt b/code/paraprobe-tessellator/CMakeLists.txt
index bf0147d..cd6b284 100755
--- a/code/paraprobe-tessellator/CMakeLists.txt
+++ b/code/paraprobe-tessellator/CMakeLists.txt
@@ -1,34 +1,18 @@
 cmake_minimum_required(VERSION 3.18.4)
 
-################################################################################################################################
-##DEVELOPER SECTION#############################################################################################################
-##in this section software developers need to make changes when debugging#######################################################
-################################################################################################################################
-#please name your project accordingly
 set(MYPROJECTNAME "paraprobe_tessellator")
 message([STATUS] "Projectname is ${MYPROJECTNAME}")
-project(${MYPROJECTNAME} LANGUAGES CXX)
+project(${MYPROJECTNAME} LANGUAGES C CXX)
 set(CMAKE_BUILD_DIR "build")
 
-#pull general information about external libraries and paths related to paraprobe
-include("../PARAPROBE.Dependencies.cmake")
-message([STATUS] "MYPROJECTPATH: ${MYPROJECTPATH}")
-message([STATUS] "MYUTILSPATH: ${MYUTILSPATH}")
-message([STATUS] "MYHDF5PATH: ${MYHDFPATH}")
-message([STATUS] "MYVOROXXPATH: ${MYVOROXXPATH}")
-
-#compose a tool-specific path
-set(MYTOOLPATH "${MYPROJECTPATH}/code/paraprobe-tessellator/")
-message([STATUS] "MYTOOLPATH: ${MYTOOLPATH}")
 set(EMPLOY_GNUCOMPILER ON)
+message([STATUS] "CONDA_PATH: ${CONDA_PREFIX}")
 message([STATUS] "MYCCC_COMPILER: __${CMAKE_C_COMPILER}__")
 message([STATUS] "MYCXX_COMPILER: __${CMAKE_CXX_COMPILER}__")
 
 #define which parallelization layers are used
 set(EMPLOY_PARALLELISM_CUDA OFF)
 
-#choose optimization level
-##-O0 nothing, debug purposes, -O1 moderate optimization, -O2 -O3 for production level up to aggressive architecture specific non-portable optimization
 if(EMPLOY_GNUCOMPILER)
 	set(MYOPTLEVEL "-O2")
 	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MYOPTLEVEL}")
@@ -36,117 +20,93 @@ if(EMPLOY_GNUCOMPILER)
 	message([STATUS] "We utilize optimization level ${MYOPTLEVEL}")
 endif()
 
-################################################################################################################################
-##END OF INTERACTION FOR NON PRO USERS##########################################################################################
-##here advanced users might want/need to make modifications if they use non default places for thirdparty libraries#############
-################################################################################################################################
-#HDF5 local installation for advanced I/O, collecting metadata and bundle analysis results together
-include_directories("${MYHDFPATH}/include")
-link_directories("${MYHDFPATH}/lib")
-set(MYHDFLINKFLAGS "-L${MYHDFPATH}/lib/ ${MYHDFPATH}/lib/libhdf5_hl.a ${MYHDFPATH}/lib/libhdf5.a ${MYHDFPATH}/lib/libz.a ${MYHDFPATH}/lib/libszaec.a ${MYHDFPATH}/lib/libaec.a -ldl")
-
-set(BOOST_ROOT "${MYBOOSTPATH}")
-set(Boost_NO_SYSTEM_PATHS ON)
-#set(Boost_INCLUDE_DIR "${MYBOOSTPATH}")
-#include_directories("${MYCGALPATH}")
-set(CGAL_DIR "${MYCGALPATH}")
-include_directories("${MYEIGENPATH}")
-include_directories("${MYVOROXXPATH}/src")
-
-#GMP and MPFR is included and found alongside the CGAL library
-#connect with ExternalLibraries.cmake via MYCGALHOME and MYEIGENHOME
-find_package(CGAL QUIET)
-if( CGAL_FOUND )
-	include( ${CGAL_USE_FILE} )
-	if (EMPLOY_MYEIGEN)
-		find_package(Eigen3 3.1.0 REQUIRED) #(3.1.0 or greater)
-		include(CGAL_Eigen3_support)
-		if(NOT TARGET CGAL::Eigen3_support)
-			message(STATUS "This project requires the Eigen library, and will not be compiled.")
-			return()
-		endif()
-	endif()
-endif()
+include_directories("${CONDA_PREFIX}/include/voro++")
+
+find_package(HDF5 REQUIRED)
+include_directories(${HDF5_INCLUDE_DIRS})
+set(MYHDFLINKFLAGS "-L${CONDA_PREFIX}/lib/ ${CONDA_PREFIX}/lib/libhdf5_hl.so ${CONDA_PREFIX}/lib/libhdf5.so ${CONDA_PREFIX}/lib/libz.so.1 ${CONDA_PREFIX}/lib/libsz.so ${CONDA_PREFIX}/lib/libaec.so -ldl")
+
+find_package(Boost REQUIRED)
+include_directories(${Boost_INCLUDE_DIRS})
 
-#connect with ExternalLibraries.cmake via MYBOOSTHOME
-#include_directories(${Boost_INCLUDE_DIR})
-link_directories(${Boost_LIBRARY_DIR})
-find_package(Boost)
+find_package(CGAL REQUIRED)
+include                     (${CGAL_USE_FILE})
+include_directories         (${CGAL_INCLUDE_DIRS})
+
+find_package(Eigen3 3.3 REQUIRED)
+#include_directories         (${EIGEN3_INCLUDE_DIRS})
+include_directories("${CONDA_PREFIX}/include/eigen3")
+
+find_package(MPI REQUIRED)
+include_directories(${MPI_INCLUDE_PATH})
 
 find_package(OpenSSL REQUIRED)
 set(MYSSLLINKFLAGS "-lssl -lcrypto")
 
 #setting up compiler-specifics
 if(EMPLOY_GNUCOMPILER)
-	#add_definitions("-std=c++1z")
-	set(MYVERBOSE "-Wall") # all warnings
-	add_definitions("${MYOPTLEVEL}")
-	add_definitions("${MYVERBOSE}")
+	set(MYVERBOSE "-fopt-info-all=opt.all")
+	add_definitions("${MYOPTLEVEL} ${MYVERBOSE}")
 	set(MYOMP "-fopenmp -lpthread")
 	add_definitions(${MYOMP})
 	add_definitions("-std=c++17")
 endif()
 
-#parallelization - MPI process-level
-#query location of MPI library
-message([STATUS] "MPI_INCLUDE_PATH ${MPI_INCLUDE_PATH}")
-if(EMPLOY_PARALLELISM_MPI)
-	find_package(MPI REQUIRED)
-	include_directories(${MPI_INCLUDE_PATH})
-endif()
-
 #specific paths of dependencies for this tool
-set(MYTOOLSRCPATH "${MYTOOLPATH}/src/cxx")
+set(MYTOOLSRCPATH "src/cxx")
+set(MYEXTPATH "../code/thirdparty/mandatory/hdf5cxxwrapper/src/cxx")
+set(MYVOROSRCPATH "../../../voro++/src")
+set(COMPILEPATH "../compiled_code")
 
 #list firstly the precompiled shared aka utils, secondly the tool-specific components, lastly the tool-specific main
 add_executable(${MYPROJECTNAME}
-	${MYUTILSPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OpenSSLInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CiteMe.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ConfigShared.cpp.o
-	${MYUTILSPATH}/PARAPROBE_FilePathHandling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_BitMangling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_HDF5Core.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Profiling.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Math.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsContinuum.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PrimsDiscrete.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Geometry.cpp.o
-	${MYUTILSPATH}/PARAPROBE_UserStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_MPIStructs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_PeriodicTable.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Crystallography.cpp.o
-	${MYUTILSPATH}/PARAPROBE_OriMath.cpp.o
-	${MYUTILSPATH}/PARAPROBE_CGALInterface.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Solutes.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Grains.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Precipitates.cpp.o
-	${MYUTILSPATH}/PARAPROBE_Histogram2D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TwoPointStats3D.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ROIs.cpp.o
-	${MYUTILSPATH}/PARAPROBE_VoxelTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_AABBTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_KDTree.cpp.o
-	${MYUTILSPATH}/PARAPROBE_IonCloudMemory.cpp.o
-	${MYUTILSPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
-	${MYUTILSPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
-
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/c_loops.cc.o
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/cell.cc.o
-#	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/cmd_line.cc
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/common.cc.o
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/container.cc.o
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/container_prd.cc.o
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/pre_container.cc.o
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/unitcell.cc.o
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/v_base.cc.o
-#	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/v_base_wl.cc
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/v_compute.cc.o
-#	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/voro++.cc
-	${MYUTILSPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/wall.cc.o
+	${COMPILEPATH}/PARAPROBE_ArgsAndGitSha.cpp.o
+	${COMPILEPATH}/PARAPROBE_OpenSSLInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_TimeAndDateHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_CiteMe.cpp.o
+	${COMPILEPATH}/PARAPROBE_ConfigShared.cpp.o
+	${COMPILEPATH}/PARAPROBE_FilePathHandling.cpp.o
+	${COMPILEPATH}/PARAPROBE_BitMangling.cpp.o
+	${COMPILEPATH}/PARAPROBE_HDF5Core.cpp.o
+	${COMPILEPATH}/PARAPROBE_Profiling.cpp.o
+	${COMPILEPATH}/PARAPROBE_Math.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsContinuum.cpp.o
+	${COMPILEPATH}/PARAPROBE_PrimsDiscrete.cpp.o
+	${COMPILEPATH}/PARAPROBE_Geometry.cpp.o
+	${COMPILEPATH}/PARAPROBE_UserStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_MPIStructs.cpp.o
+	${COMPILEPATH}/PARAPROBE_PeriodicTable.cpp.o
+	${COMPILEPATH}/PARAPROBE_Crystallography.cpp.o
+	${COMPILEPATH}/PARAPROBE_OriMath.cpp.o
+	${COMPILEPATH}/PARAPROBE_CGALInterface.cpp.o
+	${COMPILEPATH}/PARAPROBE_Solutes.cpp.o
+	${COMPILEPATH}/PARAPROBE_ThermodynamicPhase.cpp.o
+	${COMPILEPATH}/PARAPROBE_Grains.cpp.o
+	${COMPILEPATH}/PARAPROBE_Precipitates.cpp.o
+	${COMPILEPATH}/PARAPROBE_Histogram2D.cpp.o
+	${COMPILEPATH}/PARAPROBE_TwoPointStats3D.cpp.o
+	${COMPILEPATH}/PARAPROBE_ROIs.cpp.o
+	${COMPILEPATH}/PARAPROBE_VoxelTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_AABBTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_KDTree.cpp.o
+	${COMPILEPATH}/PARAPROBE_IonCloudMemory.cpp.o
+	${COMPILEPATH}/PARAPROBE_XDMFBaseHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_TriangleSoupHdl.cpp.o
+	${COMPILEPATH}/PARAPROBE_ToolsBaseHdl.cpp.o
+
+	${MYVOROSRCPATH}/c_loops.cc.o
+	${MYVOROSRCPATH}/cell.cc.o
+#	${COMPILEPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/cmd_line.cc
+	${MYVOROSRCPATH}/common.cc.o
+	${MYVOROSRCPATH}/container.cc.o
+	${MYVOROSRCPATH}/container_prd.cc.o
+	${MYVOROSRCPATH}/pre_container.cc.o
+	${MYVOROSRCPATH}/unitcell.cc.o
+	${MYVOROSRCPATH}/v_base.cc.o
+#	${COMPILEPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/v_base_wl.cc
+	${MYVOROSRCPATH}/v_compute.cc.o
+#	${COMPILEPATH}/../../${MYPROJECTPATH}/code/thirdparty/mandatory/voroxx/voro/src/voro++.cc
+	${MYVOROSRCPATH}/wall.cc.o
 
 	${MYTOOLSRCPATH}/PARAPROBE_ConfigTessellator.cpp
 	${MYTOOLSRCPATH}/PARAPROBE_TessellatorStructs.cpp
